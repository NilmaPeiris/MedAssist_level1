
functionMCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  000016ac  00001740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008001b0  008001b0  00001890  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003942  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b97  00000000  00000000  0000547a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001832  00000000  00000000  00006011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000052c  00000000  00000000  00007844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a7  00000000  00000000  00007d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e31  00000000  00000000  00008417  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000a248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6e 03 	call	0x6dc	; 0x6dc <main>
      8a:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <RTC_Clock_Write>:
	day = I2C_Read_Ack();							/* Read day */
	date = I2C_Read_Ack();							/* Read date */
	month = I2C_Read_Ack();							/* Read month */
	year = I2C_Read_Nack();							/* Read the year with Nack */
	I2C_Stop();										/* Stop i2C communication */
}
      92:	1f 93       	push	r17
      94:	cf 93       	push	r28
      96:	df 93       	push	r29
      98:	d6 2f       	mov	r29, r22
      9a:	14 2f       	mov	r17, r20
      9c:	c8 2f       	mov	r28, r24
      9e:	c2 2b       	or	r28, r18
      a0:	80 ed       	ldi	r24, 0xD0	; 208
      a2:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Start>
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Write>
      ac:	81 2f       	mov	r24, r17
      ae:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Write>
      b2:	8d 2f       	mov	r24, r29
      b4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Write>
      b8:	8c 2f       	mov	r24, r28
      ba:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Write>
      be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Stop>
      c2:	df 91       	pop	r29
      c4:	cf 91       	pop	r28
      c6:	1f 91       	pop	r17
      c8:	08 95       	ret

000000ca <RTC_Read_Clock>:
      ca:	cf 93       	push	r28
      cc:	c8 2f       	mov	r28, r24
      ce:	80 ed       	ldi	r24, 0xD0	; 208
      d0:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Start>
      d4:	8c 2f       	mov	r24, r28
      d6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Write>
      da:	81 ed       	ldi	r24, 0xD1	; 209
      dc:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Repeated_Start>
      e0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Read_Ack>
      e4:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <second+0x1>
      e8:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <second>
      ec:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Read_Ack>
      f0:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <minute+0x1>
      f4:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <minute>
      f8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_Read_Nack>
      fc:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <hour+0x1>
     100:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <hour>
     104:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Stop>
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <retSec>:

int retSec(){
	return second;	
}
     10c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <second>
     110:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <second+0x1>
     114:	08 95       	ret

00000116 <retMin>:

int retMin(){
	return minute;
}
     116:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <minute>
     11a:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <minute+0x1>
     11e:	08 95       	ret

00000120 <retHour>:

int retHour(){
	return hour;
     120:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <hour>
     124:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <hour+0x1>
     128:	08 95       	ret

0000012a <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
     12a:	11 b8       	out	0x01, r1	; 1
     12c:	80 e2       	ldi	r24, 0x20	; 32
     12e:	80 b9       	out	0x00, r24	; 0
     130:	08 95       	ret

00000132 <I2C_Start>:
     132:	94 ea       	ldi	r25, 0xA4	; 164
     134:	96 bf       	out	0x36, r25	; 54
     136:	06 b6       	in	r0, 0x36	; 54
     138:	07 fe       	sbrs	r0, 7
     13a:	fd cf       	rjmp	.-6      	; 0x136 <I2C_Start+0x4>
     13c:	91 b1       	in	r25, 0x01	; 1
     13e:	98 7f       	andi	r25, 0xF8	; 248
     140:	98 30       	cpi	r25, 0x08	; 8
     142:	71 f4       	brne	.+28     	; 0x160 <I2C_Start+0x2e>
     144:	83 b9       	out	0x03, r24	; 3
     146:	84 e8       	ldi	r24, 0x84	; 132
     148:	86 bf       	out	0x36, r24	; 54
     14a:	06 b6       	in	r0, 0x36	; 54
     14c:	07 fe       	sbrs	r0, 7
     14e:	fd cf       	rjmp	.-6      	; 0x14a <I2C_Start+0x18>
     150:	81 b1       	in	r24, 0x01	; 1
     152:	88 7f       	andi	r24, 0xF8	; 248
     154:	88 31       	cpi	r24, 0x18	; 24
     156:	31 f0       	breq	.+12     	; 0x164 <I2C_Start+0x32>
     158:	80 32       	cpi	r24, 0x20	; 32
     15a:	31 f0       	breq	.+12     	; 0x168 <I2C_Start+0x36>
     15c:	83 e0       	ldi	r24, 0x03	; 3
     15e:	08 95       	ret
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	08 95       	ret
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	08 95       	ret
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	08 95       	ret

0000016c <I2C_Repeated_Start>:
     16c:	94 ea       	ldi	r25, 0xA4	; 164
     16e:	96 bf       	out	0x36, r25	; 54
     170:	06 b6       	in	r0, 0x36	; 54
     172:	07 fe       	sbrs	r0, 7
     174:	fd cf       	rjmp	.-6      	; 0x170 <I2C_Repeated_Start+0x4>
     176:	91 b1       	in	r25, 0x01	; 1
     178:	98 7f       	andi	r25, 0xF8	; 248
     17a:	90 31       	cpi	r25, 0x10	; 16
     17c:	71 f4       	brne	.+28     	; 0x19a <I2C_Repeated_Start+0x2e>
     17e:	83 b9       	out	0x03, r24	; 3
     180:	84 e8       	ldi	r24, 0x84	; 132
     182:	86 bf       	out	0x36, r24	; 54
     184:	06 b6       	in	r0, 0x36	; 54
     186:	07 fe       	sbrs	r0, 7
     188:	fd cf       	rjmp	.-6      	; 0x184 <I2C_Repeated_Start+0x18>
     18a:	81 b1       	in	r24, 0x01	; 1
     18c:	88 7f       	andi	r24, 0xF8	; 248
     18e:	80 34       	cpi	r24, 0x40	; 64
     190:	31 f0       	breq	.+12     	; 0x19e <I2C_Repeated_Start+0x32>
     192:	80 32       	cpi	r24, 0x20	; 32
     194:	31 f0       	breq	.+12     	; 0x1a2 <I2C_Repeated_Start+0x36>
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	08 95       	ret
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	08 95       	ret
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	08 95       	ret
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	08 95       	ret

000001a6 <I2C_Stop>:
     1a6:	84 e9       	ldi	r24, 0x94	; 148
     1a8:	86 bf       	out	0x36, r24	; 54
     1aa:	06 b6       	in	r0, 0x36	; 54
     1ac:	04 fc       	sbrc	r0, 4
     1ae:	fd cf       	rjmp	.-6      	; 0x1aa <I2C_Stop+0x4>
     1b0:	08 95       	ret

000001b2 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     1b2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     1b4:	84 e8       	ldi	r24, 0x84	; 132
     1b6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1be:	81 b1       	in	r24, 0x01	; 1
     1c0:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     1c2:	88 32       	cpi	r24, 0x28	; 40
     1c4:	21 f0       	breq	.+8      	; 0x1ce <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     1c6:	80 33       	cpi	r24, 0x30	; 48
     1c8:	21 f0       	breq	.+8      	; 0x1d2 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
     1d2:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     1d4:	08 95       	ret

000001d6 <I2C_Read_Ack>:

int I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     1d6:	84 ec       	ldi	r24, 0xC4	; 196
     1d8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     1da:	06 b6       	in	r0, 0x36	; 54
     1dc:	07 fe       	sbrs	r0, 7
     1de:	fd cf       	rjmp	.-6      	; 0x1da <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     1e0:	83 b1       	in	r24, 0x03	; 3
}	
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	08 95       	ret

000001e6 <I2C_Read_Nack>:

int I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     1e6:	84 e8       	ldi	r24, 0x84	; 132
     1e8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     1ea:	06 b6       	in	r0, 0x36	; 54
     1ec:	07 fe       	sbrs	r0, 7
     1ee:	fd cf       	rjmp	.-6      	; 0x1ea <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     1f0:	83 b1       	in	r24, 0x03	; 3
}	
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	08 95       	ret

000001f6 <pinChange>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
     1f6:	67 2b       	or	r22, r23
     1f8:	09 f0       	breq	.+2      	; 0x1fc <pinChange+0x6>
     1fa:	9f c0       	rjmp	.+318    	; 0x33a <pinChange+0x144>
     1fc:	00 97       	sbiw	r24, 0x00	; 0
     1fe:	11 f4       	brne	.+4      	; 0x204 <pinChange+0xe>
     200:	d8 98       	cbi	0x1b, 0	; 27
     202:	08 95       	ret
     204:	81 30       	cpi	r24, 0x01	; 1
     206:	91 05       	cpc	r25, r1
     208:	11 f4       	brne	.+4      	; 0x20e <pinChange+0x18>
     20a:	d9 98       	cbi	0x1b, 1	; 27
     20c:	08 95       	ret
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	91 05       	cpc	r25, r1
     212:	11 f4       	brne	.+4      	; 0x218 <pinChange+0x22>
     214:	da 98       	cbi	0x1b, 2	; 27
     216:	08 95       	ret
     218:	83 30       	cpi	r24, 0x03	; 3
     21a:	91 05       	cpc	r25, r1
     21c:	11 f4       	brne	.+4      	; 0x222 <pinChange+0x2c>
     21e:	db 98       	cbi	0x1b, 3	; 27
     220:	08 95       	ret
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	11 f4       	brne	.+4      	; 0x22c <pinChange+0x36>
     228:	dc 98       	cbi	0x1b, 4	; 27
     22a:	08 95       	ret
     22c:	85 30       	cpi	r24, 0x05	; 5
     22e:	91 05       	cpc	r25, r1
     230:	11 f4       	brne	.+4      	; 0x236 <pinChange+0x40>
     232:	dd 98       	cbi	0x1b, 5	; 27
     234:	08 95       	ret
     236:	86 30       	cpi	r24, 0x06	; 6
     238:	91 05       	cpc	r25, r1
     23a:	11 f4       	brne	.+4      	; 0x240 <pinChange+0x4a>
     23c:	de 98       	cbi	0x1b, 6	; 27
     23e:	08 95       	ret
     240:	87 30       	cpi	r24, 0x07	; 7
     242:	91 05       	cpc	r25, r1
     244:	11 f4       	brne	.+4      	; 0x24a <pinChange+0x54>
     246:	df 98       	cbi	0x1b, 7	; 27
     248:	08 95       	ret
     24a:	8a 30       	cpi	r24, 0x0A	; 10
     24c:	91 05       	cpc	r25, r1
     24e:	11 f4       	brne	.+4      	; 0x254 <pinChange+0x5e>
     250:	c0 98       	cbi	0x18, 0	; 24
     252:	08 95       	ret
     254:	8b 30       	cpi	r24, 0x0B	; 11
     256:	91 05       	cpc	r25, r1
     258:	11 f4       	brne	.+4      	; 0x25e <pinChange+0x68>
     25a:	c1 98       	cbi	0x18, 1	; 24
     25c:	08 95       	ret
     25e:	8c 30       	cpi	r24, 0x0C	; 12
     260:	91 05       	cpc	r25, r1
     262:	11 f4       	brne	.+4      	; 0x268 <pinChange+0x72>
     264:	c2 98       	cbi	0x18, 2	; 24
     266:	08 95       	ret
     268:	8d 30       	cpi	r24, 0x0D	; 13
     26a:	91 05       	cpc	r25, r1
     26c:	11 f4       	brne	.+4      	; 0x272 <pinChange+0x7c>
     26e:	c3 98       	cbi	0x18, 3	; 24
     270:	08 95       	ret
     272:	8e 30       	cpi	r24, 0x0E	; 14
     274:	91 05       	cpc	r25, r1
     276:	11 f4       	brne	.+4      	; 0x27c <pinChange+0x86>
     278:	c4 98       	cbi	0x18, 4	; 24
     27a:	08 95       	ret
     27c:	8f 30       	cpi	r24, 0x0F	; 15
     27e:	91 05       	cpc	r25, r1
     280:	11 f4       	brne	.+4      	; 0x286 <pinChange+0x90>
     282:	c5 98       	cbi	0x18, 5	; 24
     284:	08 95       	ret
     286:	80 31       	cpi	r24, 0x10	; 16
     288:	91 05       	cpc	r25, r1
     28a:	11 f4       	brne	.+4      	; 0x290 <pinChange+0x9a>
     28c:	c6 98       	cbi	0x18, 6	; 24
     28e:	08 95       	ret
     290:	81 31       	cpi	r24, 0x11	; 17
     292:	91 05       	cpc	r25, r1
     294:	11 f4       	brne	.+4      	; 0x29a <pinChange+0xa4>
     296:	c7 98       	cbi	0x18, 7	; 24
     298:	08 95       	ret
     29a:	84 31       	cpi	r24, 0x14	; 20
     29c:	91 05       	cpc	r25, r1
     29e:	11 f4       	brne	.+4      	; 0x2a4 <pinChange+0xae>
     2a0:	a8 98       	cbi	0x15, 0	; 21
     2a2:	08 95       	ret
     2a4:	85 31       	cpi	r24, 0x15	; 21
     2a6:	91 05       	cpc	r25, r1
     2a8:	11 f4       	brne	.+4      	; 0x2ae <pinChange+0xb8>
     2aa:	a9 98       	cbi	0x15, 1	; 21
     2ac:	08 95       	ret
     2ae:	86 31       	cpi	r24, 0x16	; 22
     2b0:	91 05       	cpc	r25, r1
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <pinChange+0xc2>
     2b4:	aa 98       	cbi	0x15, 2	; 21
     2b6:	08 95       	ret
     2b8:	87 31       	cpi	r24, 0x17	; 23
     2ba:	91 05       	cpc	r25, r1
     2bc:	11 f4       	brne	.+4      	; 0x2c2 <pinChange+0xcc>
     2be:	ab 98       	cbi	0x15, 3	; 21
     2c0:	08 95       	ret
     2c2:	88 31       	cpi	r24, 0x18	; 24
     2c4:	91 05       	cpc	r25, r1
     2c6:	11 f4       	brne	.+4      	; 0x2cc <pinChange+0xd6>
     2c8:	ac 98       	cbi	0x15, 4	; 21
     2ca:	08 95       	ret
     2cc:	89 31       	cpi	r24, 0x19	; 25
     2ce:	91 05       	cpc	r25, r1
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <pinChange+0xe0>
     2d2:	ad 98       	cbi	0x15, 5	; 21
     2d4:	08 95       	ret
     2d6:	8a 31       	cpi	r24, 0x1A	; 26
     2d8:	91 05       	cpc	r25, r1
     2da:	11 f4       	brne	.+4      	; 0x2e0 <pinChange+0xea>
     2dc:	ae 98       	cbi	0x15, 6	; 21
     2de:	08 95       	ret
     2e0:	8b 31       	cpi	r24, 0x1B	; 27
     2e2:	91 05       	cpc	r25, r1
     2e4:	11 f4       	brne	.+4      	; 0x2ea <pinChange+0xf4>
     2e6:	af 98       	cbi	0x15, 7	; 21
     2e8:	08 95       	ret
     2ea:	8e 31       	cpi	r24, 0x1E	; 30
     2ec:	91 05       	cpc	r25, r1
     2ee:	11 f4       	brne	.+4      	; 0x2f4 <pinChange+0xfe>
     2f0:	90 98       	cbi	0x12, 0	; 18
     2f2:	08 95       	ret
     2f4:	8f 31       	cpi	r24, 0x1F	; 31
     2f6:	91 05       	cpc	r25, r1
     2f8:	11 f4       	brne	.+4      	; 0x2fe <pinChange+0x108>
     2fa:	91 98       	cbi	0x12, 1	; 18
     2fc:	08 95       	ret
     2fe:	80 32       	cpi	r24, 0x20	; 32
     300:	91 05       	cpc	r25, r1
     302:	11 f4       	brne	.+4      	; 0x308 <pinChange+0x112>
     304:	92 98       	cbi	0x12, 2	; 18
     306:	08 95       	ret
     308:	81 32       	cpi	r24, 0x21	; 33
     30a:	91 05       	cpc	r25, r1
     30c:	11 f4       	brne	.+4      	; 0x312 <pinChange+0x11c>
     30e:	93 98       	cbi	0x12, 3	; 18
     310:	08 95       	ret
     312:	82 32       	cpi	r24, 0x22	; 34
     314:	91 05       	cpc	r25, r1
     316:	11 f4       	brne	.+4      	; 0x31c <pinChange+0x126>
     318:	94 98       	cbi	0x12, 4	; 18
     31a:	08 95       	ret
     31c:	83 32       	cpi	r24, 0x23	; 35
     31e:	91 05       	cpc	r25, r1
     320:	11 f4       	brne	.+4      	; 0x326 <pinChange+0x130>
     322:	95 98       	cbi	0x12, 5	; 18
     324:	08 95       	ret
     326:	84 32       	cpi	r24, 0x24	; 36
     328:	91 05       	cpc	r25, r1
     32a:	11 f4       	brne	.+4      	; 0x330 <pinChange+0x13a>
     32c:	96 98       	cbi	0x12, 6	; 18
     32e:	08 95       	ret
     330:	85 97       	sbiw	r24, 0x25	; 37
     332:	09 f0       	breq	.+2      	; 0x336 <pinChange+0x140>
     334:	9f c0       	rjmp	.+318    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     336:	97 98       	cbi	0x12, 7	; 18
     338:	08 95       	ret
     33a:	00 97       	sbiw	r24, 0x00	; 0
     33c:	11 f4       	brne	.+4      	; 0x342 <pinChange+0x14c>
     33e:	d8 9a       	sbi	0x1b, 0	; 27
     340:	08 95       	ret
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	91 05       	cpc	r25, r1
     346:	11 f4       	brne	.+4      	; 0x34c <pinChange+0x156>
     348:	d9 9a       	sbi	0x1b, 1	; 27
     34a:	08 95       	ret
     34c:	82 30       	cpi	r24, 0x02	; 2
     34e:	91 05       	cpc	r25, r1
     350:	11 f4       	brne	.+4      	; 0x356 <pinChange+0x160>
     352:	da 9a       	sbi	0x1b, 2	; 27
     354:	08 95       	ret
     356:	83 30       	cpi	r24, 0x03	; 3
     358:	91 05       	cpc	r25, r1
     35a:	11 f4       	brne	.+4      	; 0x360 <pinChange+0x16a>
     35c:	db 9a       	sbi	0x1b, 3	; 27
     35e:	08 95       	ret
     360:	84 30       	cpi	r24, 0x04	; 4
     362:	91 05       	cpc	r25, r1
     364:	11 f4       	brne	.+4      	; 0x36a <pinChange+0x174>
     366:	dc 9a       	sbi	0x1b, 4	; 27
     368:	08 95       	ret
     36a:	85 30       	cpi	r24, 0x05	; 5
     36c:	91 05       	cpc	r25, r1
     36e:	11 f4       	brne	.+4      	; 0x374 <pinChange+0x17e>
     370:	dd 9a       	sbi	0x1b, 5	; 27
     372:	08 95       	ret
     374:	86 30       	cpi	r24, 0x06	; 6
     376:	91 05       	cpc	r25, r1
     378:	11 f4       	brne	.+4      	; 0x37e <pinChange+0x188>
     37a:	de 9a       	sbi	0x1b, 6	; 27
     37c:	08 95       	ret
     37e:	87 30       	cpi	r24, 0x07	; 7
     380:	91 05       	cpc	r25, r1
     382:	11 f4       	brne	.+4      	; 0x388 <pinChange+0x192>
     384:	df 9a       	sbi	0x1b, 7	; 27
     386:	08 95       	ret
     388:	8a 30       	cpi	r24, 0x0A	; 10
     38a:	91 05       	cpc	r25, r1
     38c:	11 f4       	brne	.+4      	; 0x392 <pinChange+0x19c>
     38e:	c0 9a       	sbi	0x18, 0	; 24
     390:	08 95       	ret
     392:	8b 30       	cpi	r24, 0x0B	; 11
     394:	91 05       	cpc	r25, r1
     396:	11 f4       	brne	.+4      	; 0x39c <pinChange+0x1a6>
     398:	c1 9a       	sbi	0x18, 1	; 24
     39a:	08 95       	ret
     39c:	8c 30       	cpi	r24, 0x0C	; 12
     39e:	91 05       	cpc	r25, r1
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <pinChange+0x1b0>
     3a2:	c2 9a       	sbi	0x18, 2	; 24
     3a4:	08 95       	ret
     3a6:	8d 30       	cpi	r24, 0x0D	; 13
     3a8:	91 05       	cpc	r25, r1
     3aa:	11 f4       	brne	.+4      	; 0x3b0 <pinChange+0x1ba>
     3ac:	c3 9a       	sbi	0x18, 3	; 24
     3ae:	08 95       	ret
     3b0:	8e 30       	cpi	r24, 0x0E	; 14
     3b2:	91 05       	cpc	r25, r1
     3b4:	11 f4       	brne	.+4      	; 0x3ba <pinChange+0x1c4>
     3b6:	c4 9a       	sbi	0x18, 4	; 24
     3b8:	08 95       	ret
     3ba:	8f 30       	cpi	r24, 0x0F	; 15
     3bc:	91 05       	cpc	r25, r1
     3be:	11 f4       	brne	.+4      	; 0x3c4 <pinChange+0x1ce>
     3c0:	c5 9a       	sbi	0x18, 5	; 24
     3c2:	08 95       	ret
     3c4:	80 31       	cpi	r24, 0x10	; 16
     3c6:	91 05       	cpc	r25, r1
     3c8:	11 f4       	brne	.+4      	; 0x3ce <pinChange+0x1d8>
     3ca:	c6 9a       	sbi	0x18, 6	; 24
     3cc:	08 95       	ret
     3ce:	81 31       	cpi	r24, 0x11	; 17
     3d0:	91 05       	cpc	r25, r1
     3d2:	11 f4       	brne	.+4      	; 0x3d8 <pinChange+0x1e2>
     3d4:	c7 9a       	sbi	0x18, 7	; 24
     3d6:	08 95       	ret
     3d8:	84 31       	cpi	r24, 0x14	; 20
     3da:	91 05       	cpc	r25, r1
     3dc:	11 f4       	brne	.+4      	; 0x3e2 <pinChange+0x1ec>
     3de:	a8 9a       	sbi	0x15, 0	; 21
     3e0:	08 95       	ret
     3e2:	85 31       	cpi	r24, 0x15	; 21
     3e4:	91 05       	cpc	r25, r1
     3e6:	11 f4       	brne	.+4      	; 0x3ec <pinChange+0x1f6>
     3e8:	a9 9a       	sbi	0x15, 1	; 21
     3ea:	08 95       	ret
     3ec:	86 31       	cpi	r24, 0x16	; 22
     3ee:	91 05       	cpc	r25, r1
     3f0:	11 f4       	brne	.+4      	; 0x3f6 <pinChange+0x200>
     3f2:	aa 9a       	sbi	0x15, 2	; 21
     3f4:	08 95       	ret
     3f6:	87 31       	cpi	r24, 0x17	; 23
     3f8:	91 05       	cpc	r25, r1
     3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	ab 9a       	sbi	0x15, 3	; 21
     3fe:	08 95       	ret
     400:	88 31       	cpi	r24, 0x18	; 24
     402:	91 05       	cpc	r25, r1
     404:	11 f4       	brne	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     406:	ac 9a       	sbi	0x15, 4	; 21
     408:	08 95       	ret
     40a:	89 31       	cpi	r24, 0x19	; 25
     40c:	91 05       	cpc	r25, r1
     40e:	11 f4       	brne	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     410:	ad 9a       	sbi	0x15, 5	; 21
     412:	08 95       	ret
     414:	8a 31       	cpi	r24, 0x1A	; 26
     416:	91 05       	cpc	r25, r1
     418:	11 f4       	brne	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41a:	ae 9a       	sbi	0x15, 6	; 21
     41c:	08 95       	ret
     41e:	8b 31       	cpi	r24, 0x1B	; 27
     420:	91 05       	cpc	r25, r1
     422:	11 f4       	brne	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     424:	af 9a       	sbi	0x15, 7	; 21
     426:	08 95       	ret
     428:	8e 31       	cpi	r24, 0x1E	; 30
     42a:	91 05       	cpc	r25, r1
     42c:	11 f4       	brne	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42e:	90 9a       	sbi	0x12, 0	; 18
     430:	08 95       	ret
     432:	8f 31       	cpi	r24, 0x1F	; 31
     434:	91 05       	cpc	r25, r1
     436:	11 f4       	brne	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     438:	91 9a       	sbi	0x12, 1	; 18
     43a:	08 95       	ret
     43c:	80 32       	cpi	r24, 0x20	; 32
     43e:	91 05       	cpc	r25, r1
     440:	11 f4       	brne	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     442:	92 9a       	sbi	0x12, 2	; 18
     444:	08 95       	ret
     446:	81 32       	cpi	r24, 0x21	; 33
     448:	91 05       	cpc	r25, r1
     44a:	11 f4       	brne	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	93 9a       	sbi	0x12, 3	; 18
     44e:	08 95       	ret
     450:	82 32       	cpi	r24, 0x22	; 34
     452:	91 05       	cpc	r25, r1
     454:	11 f4       	brne	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     456:	94 9a       	sbi	0x12, 4	; 18
     458:	08 95       	ret
     45a:	83 32       	cpi	r24, 0x23	; 35
     45c:	91 05       	cpc	r25, r1
     45e:	11 f4       	brne	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     460:	95 9a       	sbi	0x12, 5	; 18
     462:	08 95       	ret
     464:	84 32       	cpi	r24, 0x24	; 36
     466:	91 05       	cpc	r25, r1
     468:	11 f4       	brne	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46a:	96 9a       	sbi	0x12, 6	; 18
     46c:	08 95       	ret
     46e:	85 97       	sbiw	r24, 0x25	; 37
     470:	09 f4       	brne	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     472:	97 9a       	sbi	0x12, 7	; 18
     474:	08 95       	ret

00000476 <Lcd4_Port>:
     476:	cf 93       	push	r28
     478:	c8 2f       	mov	r28, r24
     47a:	80 ff       	sbrs	r24, 0
     47c:	07 c0       	rjmp	.+14     	; 0x48c <Lcd4_Port+0x16>
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	82 e2       	ldi	r24, 0x22	; 34
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     48a:	06 c0       	rjmp	.+12     	; 0x498 <Lcd4_Port+0x22>
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	82 e2       	ldi	r24, 0x22	; 34
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     498:	c1 ff       	sbrs	r28, 1
     49a:	07 c0       	rjmp	.+14     	; 0x4aa <Lcd4_Port+0x34>
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	83 e2       	ldi	r24, 0x23	; 35
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <Lcd4_Port+0x40>
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	83 e2       	ldi	r24, 0x23	; 35
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     4b6:	c2 ff       	sbrs	r28, 2
     4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <Lcd4_Port+0x52>
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	84 e2       	ldi	r24, 0x24	; 36
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <Lcd4_Port+0x5e>
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	84 e2       	ldi	r24, 0x24	; 36
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     4d4:	c3 ff       	sbrs	r28, 3
     4d6:	07 c0       	rjmp	.+14     	; 0x4e6 <Lcd4_Port+0x70>
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	85 e2       	ldi	r24, 0x25	; 37
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <Lcd4_Port+0x7c>
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	85 e2       	ldi	r24, 0x25	; 37
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <Lcd4_Cmd>:
     4f6:	cf 93       	push	r28
     4f8:	c8 2f       	mov	r28, r24
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	8a e1       	ldi	r24, 0x1A	; 26
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     506:	8c 2f       	mov	r24, r28
     508:	0e 94 3b 02 	call	0x476	; 0x476 <Lcd4_Port>
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	8b e1       	ldi	r24, 0x1B	; 27
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     518:	8f ec       	ldi	r24, 0xCF	; 207
     51a:	97 e0       	ldi	r25, 0x07	; 7
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <Lcd4_Cmd+0x26>
     520:	00 c0       	rjmp	.+0      	; 0x522 <Lcd4_Cmd+0x2c>
     522:	00 00       	nop
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	8b e1       	ldi	r24, 0x1B	; 27
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     530:	8f ec       	ldi	r24, 0xCF	; 207
     532:	97 e0       	ldi	r25, 0x07	; 7
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <Lcd4_Cmd+0x3e>
     538:	00 c0       	rjmp	.+0      	; 0x53a <Lcd4_Cmd+0x44>
     53a:	00 00       	nop
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <Lcd4_Clear>:
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     546:	85 e8       	ldi	r24, 0x85	; 133
     548:	8a 95       	dec	r24
     54a:	f1 f7       	brne	.-4      	; 0x548 <Lcd4_Clear+0x8>
     54c:	00 00       	nop
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     554:	8f e9       	ldi	r24, 0x9F	; 159
     556:	9f e0       	ldi	r25, 0x0F	; 15
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <Lcd4_Clear+0x18>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <Lcd4_Clear+0x1e>
     55e:	00 00       	nop
     560:	08 95       	ret

00000562 <Lcd4_Set_Cursor>:
     562:	cf 93       	push	r28
     564:	c6 2f       	mov	r28, r22
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	59 f4       	brne	.+22     	; 0x580 <Lcd4_Set_Cursor+0x1e>
     56a:	80 e8       	ldi	r24, 0x80	; 128
     56c:	86 0f       	add	r24, r22
     56e:	82 95       	swap	r24
     570:	8f 70       	andi	r24, 0x0F	; 15
     572:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     576:	8c 2f       	mov	r24, r28
     578:	8f 70       	andi	r24, 0x0F	; 15
     57a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     57e:	26 c0       	rjmp	.+76     	; 0x5cc <Lcd4_Set_Cursor+0x6a>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	59 f4       	brne	.+22     	; 0x59a <Lcd4_Set_Cursor+0x38>
     584:	80 ec       	ldi	r24, 0xC0	; 192
     586:	86 0f       	add	r24, r22
     588:	82 95       	swap	r24
     58a:	8f 70       	andi	r24, 0x0F	; 15
     58c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     590:	8c 2f       	mov	r24, r28
     592:	8f 70       	andi	r24, 0x0F	; 15
     594:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     598:	19 c0       	rjmp	.+50     	; 0x5cc <Lcd4_Set_Cursor+0x6a>
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	59 f4       	brne	.+22     	; 0x5b4 <Lcd4_Set_Cursor+0x52>
     59e:	cc 56       	subi	r28, 0x6C	; 108
     5a0:	8c 2f       	mov	r24, r28
     5a2:	82 95       	swap	r24
     5a4:	8f 70       	andi	r24, 0x0F	; 15
     5a6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     5aa:	8c 2f       	mov	r24, r28
     5ac:	8f 70       	andi	r24, 0x0F	; 15
     5ae:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     5b2:	0c c0       	rjmp	.+24     	; 0x5cc <Lcd4_Set_Cursor+0x6a>
     5b4:	84 30       	cpi	r24, 0x04	; 4
     5b6:	51 f4       	brne	.+20     	; 0x5cc <Lcd4_Set_Cursor+0x6a>
     5b8:	cc 52       	subi	r28, 0x2C	; 44
     5ba:	8c 2f       	mov	r24, r28
     5bc:	82 95       	swap	r24
     5be:	8f 70       	andi	r24, 0x0F	; 15
     5c0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     5c4:	8c 2f       	mov	r24, r28
     5c6:	8f 70       	andi	r24, 0x0F	; 15
     5c8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <Lcd4_Init>:
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	0e 94 3b 02 	call	0x476	; 0x476 <Lcd4_Port>
     5d6:	8f e3       	ldi	r24, 0x3F	; 63
     5d8:	9c e9       	ldi	r25, 0x9C	; 156
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <Lcd4_Init+0xa>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <Lcd4_Init+0x10>
     5e0:	00 00       	nop
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     5e8:	8f e0       	ldi	r24, 0x0F	; 15
     5ea:	97 e2       	ldi	r25, 0x27	; 39
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <Lcd4_Init+0x1c>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <Lcd4_Init+0x22>
     5f2:	00 00       	nop
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     5fa:	8f ee       	ldi	r24, 0xEF	; 239
     5fc:	95 e5       	ldi	r25, 0x55	; 85
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <Lcd4_Init+0x2e>
     602:	00 c0       	rjmp	.+0      	; 0x604 <Lcd4_Init+0x34>
     604:	00 00       	nop
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     618:	88 e0       	ldi	r24, 0x08	; 8
     61a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     624:	8c e0       	ldi	r24, 0x0C	; 12
     626:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd4_Cmd>
     636:	08 95       	ret

00000638 <Lcd4_Write_Char>:
     638:	cf 93       	push	r28
     63a:	c8 2f       	mov	r28, r24
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	8a e1       	ldi	r24, 0x1A	; 26
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     648:	8c 2f       	mov	r24, r28
     64a:	82 95       	swap	r24
     64c:	8f 70       	andi	r24, 0x0F	; 15
     64e:	0e 94 3b 02 	call	0x476	; 0x476 <Lcd4_Port>
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	8b e1       	ldi	r24, 0x1B	; 27
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     65e:	8f ec       	ldi	r24, 0xCF	; 207
     660:	97 e0       	ldi	r25, 0x07	; 7
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <Lcd4_Write_Char+0x2a>
     666:	00 c0       	rjmp	.+0      	; 0x668 <Lcd4_Write_Char+0x30>
     668:	00 00       	nop
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	8b e1       	ldi	r24, 0x1B	; 27
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     676:	8f ec       	ldi	r24, 0xCF	; 207
     678:	97 e0       	ldi	r25, 0x07	; 7
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <Lcd4_Write_Char+0x42>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <Lcd4_Write_Char+0x48>
     680:	00 00       	nop
     682:	8c 2f       	mov	r24, r28
     684:	8f 70       	andi	r24, 0x0F	; 15
     686:	0e 94 3b 02 	call	0x476	; 0x476 <Lcd4_Port>
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	8b e1       	ldi	r24, 0x1B	; 27
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     696:	8f ec       	ldi	r24, 0xCF	; 207
     698:	97 e0       	ldi	r25, 0x07	; 7
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <Lcd4_Write_Char+0x62>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <Lcd4_Write_Char+0x68>
     6a0:	00 00       	nop
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	8b e1       	ldi	r24, 0x1B	; 27
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pinChange>
     6ae:	8f ec       	ldi	r24, 0xCF	; 207
     6b0:	97 e0       	ldi	r25, 0x07	; 7
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <Lcd4_Write_Char+0x7a>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <Lcd4_Write_Char+0x80>
     6b8:	00 00       	nop
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <Lcd4_Write_String>:
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
     6c4:	88 81       	ld	r24, Y
     6c6:	88 23       	and	r24, r24
     6c8:	31 f0       	breq	.+12     	; 0x6d6 <Lcd4_Write_String+0x18>
     6ca:	21 96       	adiw	r28, 0x01	; 1
     6cc:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
     6d0:	89 91       	ld	r24, Y+
     6d2:	81 11       	cpse	r24, r1
     6d4:	fb cf       	rjmp	.-10     	; 0x6cc <Lcd4_Write_String+0xe>
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <main>:


int main(void)
{
    /* Replace with your application code */
	DDRD = 0xF7;		//	0,1-GSM		3-Emerge Button		4,5,6,7-LCD
     6dc:	87 ef       	ldi	r24, 0xF7	; 247
     6de:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFC;        //	6,7-LCD		0,1-RTC
     6e0:	8c ef       	ldi	r24, 0xFC	; 252
     6e2:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xF0;		//	Numberpad
     6e4:	80 ef       	ldi	r24, 0xF0	; 240
     6e6:	8a bb       	out	0x1a, r24	; 26
	
	PORTA = 0x00;
     6e8:	1b ba       	out	0x1b, r1	; 27
	
	Lcd4_Init();
     6ea:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Lcd4_Init>
	Lcd4_Clear();
     6ee:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
	Lcd4_Set_Cursor(2,4);
     6f2:	64 e0       	ldi	r22, 0x04	; 4
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Med Assist!");
     6fa:	8c e6       	ldi	r24, 0x6C	; 108
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     702:	2f ef       	ldi	r18, 0xFF	; 255
     704:	89 e6       	ldi	r24, 0x69	; 105
     706:	98 e1       	ldi	r25, 0x18	; 24
     708:	21 50       	subi	r18, 0x01	; 1
     70a:	80 40       	sbci	r24, 0x00	; 0
     70c:	90 40       	sbci	r25, 0x00	; 0
     70e:	e1 f7       	brne	.-8      	; 0x708 <main+0x2c>
     710:	00 c0       	rjmp	.+0      	; 0x712 <main+0x36>
     712:	00 00       	nop
	_delay_ms(1000);
	
	//----------------Interrupt for Emergency Button-----------------
	TCCR0 = 0x01;
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	83 bf       	out	0x33, r24	; 51
	TIMSK=0x01;
     718:	89 bf       	out	0x39, r24	; 57
	sei();
     71a:	78 94       	sei
	//----------------RTC Module--------------------
	I2C_Init();
     71c:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_Init>
	
		
    while (1) 
    {
		
		Lcd4_Clear();
     720:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		Menu();
     724:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Menu>
     728:	fb cf       	rjmp	.-10     	; 0x720 <main+0x44>

0000072a <sendMsg>:
    }
}

void sendMsg(){
	//GSM Code
	Lcd4_Clear();
     72a:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
     72e:	8f ec       	ldi	r24, 0xCF	; 207
     730:	97 e0       	ldi	r25, 0x07	; 7
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <sendMsg+0x8>
     736:	00 c0       	rjmp	.+0      	; 0x738 <sendMsg+0xe>
     738:	00 00       	nop
	_delay_ms(1);
	Lcd4_Set_Cursor(2,3);
     73a:	63 e0       	ldi	r22, 0x03	; 3
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Sending");
     742:	88 e7       	ldi	r24, 0x78	; 120
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
     74a:	c5 e0       	ldi	r28, 0x05	; 5
     74c:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<5;i++){
		Lcd4_Set_Cursor(2,10);
     74e:	6a e0       	ldi	r22, 0x0A	; 10
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
     756:	9f ef       	ldi	r25, 0xFF	; 255
     758:	22 e5       	ldi	r18, 0x52	; 82
     75a:	87 e0       	ldi	r24, 0x07	; 7
     75c:	91 50       	subi	r25, 0x01	; 1
     75e:	20 40       	sbci	r18, 0x00	; 0
     760:	80 40       	sbci	r24, 0x00	; 0
     762:	e1 f7       	brne	.-8      	; 0x75c <sendMsg+0x32>
     764:	00 c0       	rjmp	.+0      	; 0x766 <sendMsg+0x3c>
     766:	00 00       	nop
		_delay_ms(300);
		Lcd4_Write_Char('.');
     768:	8e e2       	ldi	r24, 0x2E	; 46
     76a:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
     76e:	9f ef       	ldi	r25, 0xFF	; 255
     770:	22 e5       	ldi	r18, 0x52	; 82
     772:	87 e0       	ldi	r24, 0x07	; 7
     774:	91 50       	subi	r25, 0x01	; 1
     776:	20 40       	sbci	r18, 0x00	; 0
     778:	80 40       	sbci	r24, 0x00	; 0
     77a:	e1 f7       	brne	.-8      	; 0x774 <sendMsg+0x4a>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <sendMsg+0x54>
     77e:	00 00       	nop
		_delay_ms(300);
		Lcd4_Write_Char('.');
     780:	8e e2       	ldi	r24, 0x2E	; 46
     782:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
     786:	9f ef       	ldi	r25, 0xFF	; 255
     788:	22 e5       	ldi	r18, 0x52	; 82
     78a:	87 e0       	ldi	r24, 0x07	; 7
     78c:	91 50       	subi	r25, 0x01	; 1
     78e:	20 40       	sbci	r18, 0x00	; 0
     790:	80 40       	sbci	r24, 0x00	; 0
     792:	e1 f7       	brne	.-8      	; 0x78c <sendMsg+0x62>
     794:	00 c0       	rjmp	.+0      	; 0x796 <sendMsg+0x6c>
     796:	00 00       	nop
		_delay_ms(300);
		Lcd4_Write_Char('.');
     798:	8e e2       	ldi	r24, 0x2E	; 46
     79a:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
		Lcd4_Set_Cursor(2,10);
     79e:	6a e0       	ldi	r22, 0x0A	; 10
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
		Lcd4_Write_Char(0x08);
     7a6:	88 e0       	ldi	r24, 0x08	; 8
     7a8:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
		Lcd4_Write_Char(0x08);
     7ac:	88 e0       	ldi	r24, 0x08	; 8
     7ae:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
		Lcd4_Write_Char(0x08);	
     7b2:	88 e0       	ldi	r24, 0x08	; 8
     7b4:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
     7b8:	21 97       	sbiw	r28, 0x01	; 1
	//GSM Code
	Lcd4_Clear();
	_delay_ms(1);
	Lcd4_Set_Cursor(2,3);
	Lcd4_Write_String("Sending");
	for(int i=0;i<5;i++){
     7ba:	49 f6       	brne	.-110    	; 0x74e <sendMsg+0x24>
		Lcd4_Set_Cursor(2,10);
		Lcd4_Write_Char(0x08);
		Lcd4_Write_Char(0x08);
		Lcd4_Write_Char(0x08);	
	}
	Lcd4_Clear();
     7bc:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
	Lcd4_Set_Cursor(2,3);
     7c0:	63 e0       	ldi	r22, 0x03	; 3
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Done");
     7c8:	80 e8       	ldi	r24, 0x80	; 128
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
     7d0:	9f ef       	ldi	r25, 0xFF	; 255
     7d2:	29 e6       	ldi	r18, 0x69	; 105
     7d4:	88 e1       	ldi	r24, 0x18	; 24
     7d6:	91 50       	subi	r25, 0x01	; 1
     7d8:	20 40       	sbci	r18, 0x00	; 0
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <sendMsg+0xac>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <sendMsg+0xb6>
     7e0:	00 00       	nop
	_delay_ms(1000);
	main();
     7e2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <main>

000007e6 <__vector_11>:
}

ISR(TIMER0_OVF_vect){
     7e6:	1f 92       	push	r1
     7e8:	0f 92       	push	r0
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	0f 92       	push	r0
     7ee:	11 24       	eor	r1, r1
     7f0:	2f 93       	push	r18
     7f2:	3f 93       	push	r19
     7f4:	4f 93       	push	r20
     7f6:	5f 93       	push	r21
     7f8:	6f 93       	push	r22
     7fa:	7f 93       	push	r23
     7fc:	8f 93       	push	r24
     7fe:	9f 93       	push	r25
     800:	af 93       	push	r26
     802:	bf 93       	push	r27
     804:	ef 93       	push	r30
     806:	ff 93       	push	r31
	if(PIND & (1<<PD3)){
     808:	83 9b       	sbis	0x10, 3	; 16
     80a:	04 c0       	rjmp	.+8      	; 0x814 <__vector_11+0x2e>
		while (PIND & (1<<PD3))
     80c:	83 99       	sbic	0x10, 3	; 16
     80e:	fe cf       	rjmp	.-4      	; 0x80c <__vector_11+0x26>
		{
			continue;
		}
		sendMsg();
     810:	0e 94 95 03 	call	0x72a	; 0x72a <sendMsg>
	}
}
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	bf 91       	pop	r27
     81a:	af 91       	pop	r26
     81c:	9f 91       	pop	r25
     81e:	8f 91       	pop	r24
     820:	7f 91       	pop	r23
     822:	6f 91       	pop	r22
     824:	5f 91       	pop	r21
     826:	4f 91       	pop	r20
     828:	3f 91       	pop	r19
     82a:	2f 91       	pop	r18
     82c:	0f 90       	pop	r0
     82e:	0f be       	out	0x3f, r0	; 63
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <setTime>:
	}
}



void setTime(){
     836:	8f 92       	push	r8
     838:	9f 92       	push	r9
     83a:	af 92       	push	r10
     83c:	bf 92       	push	r11
     83e:	cf 92       	push	r12
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	65 97       	sbiw	r28, 0x15	; 21
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
	char chr;
	char buffer[20];
	
	
	start = 2;
	Lcd4_Set_Cursor(1,3);
     85e:	63 e0       	ldi	r22, 0x03	; 3
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("SET TIME");
     86a:	8a e8       	ldi	r24, 0x8A	; 138
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(3,start);
     872:	62 e0       	ldi	r22, 0x02	; 2
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	
	sc=retSec();
     87e:	0e 94 86 00 	call	0x10c	; 0x10c <retSec>
     882:	5c 01       	movw	r10, r24
	mn=retMin();
     884:	0e 94 8b 00 	call	0x116	; 0x116 <retMin>
     888:	6c 01       	movw	r12, r24
	hr=retHour();
     88a:	0e 94 90 00 	call	0x120	; 0x120 <retHour>
     88e:	7c 01       	movw	r14, r24
	RTC_Read_Clock(0);
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	0e 94 65 00 	call	0xca	; 0xca <RTC_Read_Clock>
	sprintf(buffer, "%02x:%02x:%02x  ", hr, mn, sc);
     896:	bf 92       	push	r11
     898:	af 92       	push	r10
     89a:	df 92       	push	r13
     89c:	cf 92       	push	r12
     89e:	ff 92       	push	r15
     8a0:	ef 92       	push	r14
     8a2:	85 e8       	ldi	r24, 0x85	; 133
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	9f 93       	push	r25
     8a8:	8f 93       	push	r24
     8aa:	8e 01       	movw	r16, r28
     8ac:	0e 5f       	subi	r16, 0xFE	; 254
     8ae:	1f 4f       	sbci	r17, 0xFF	; 255
     8b0:	1f 93       	push	r17
     8b2:	0f 93       	push	r16
     8b4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sprintf>
	
	Lcd4_Write_String(buffer);
     8b8:	c8 01       	movw	r24, r16
     8ba:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
	
	int i=0;
     8c8:	00 e0       	ldi	r16, 0x00	; 0
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
	while(1){
		if(i>7){
     8ce:	08 30       	cpi	r16, 0x08	; 8
     8d0:	11 05       	cpc	r17, r1
     8d2:	0c f0       	brlt	.+2      	; 0x8d6 <__stack+0x77>
     8d4:	69 c0       	rjmp	.+210    	; 0x9a8 <__stack+0x149>
			break;
		}
		if(i==2 || i==5){
     8d6:	02 30       	cpi	r16, 0x02	; 2
     8d8:	11 05       	cpc	r17, r1
     8da:	19 f0       	breq	.+6      	; 0x8e2 <__stack+0x83>
     8dc:	05 30       	cpi	r16, 0x05	; 5
     8de:	11 05       	cpc	r17, r1
     8e0:	19 f4       	brne	.+6      	; 0x8e8 <__stack+0x89>
			i++;
     8e2:	0f 5f       	subi	r16, 0xFF	; 255
     8e4:	1f 4f       	sbci	r17, 0xFF	; 255
			continue;
     8e6:	f3 cf       	rjmp	.-26     	; 0x8ce <__stack+0x6f>
		}
		chr = numberpressed();
     8e8:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	8f e1       	ldi	r24, 0x1F	; 31
     8f0:	9e e4       	ldi	r25, 0x4E	; 78
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <__stack+0x93>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <__stack+0x99>
     8f8:	00 00       	nop
		_delay_ms(10);		
		if(chr!='N'){
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	8e 34       	cpi	r24, 0x4E	; 78
     8fe:	39 f3       	breq	.-50     	; 0x8ce <__stack+0x6f>
			c = atoi(&chr);
     900:	ce 01       	movw	r24, r28
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	0e 94 fb 07 	call	0xff6	; 0xff6 <atoi>
     908:	4c 01       	movw	r8, r24
			Lcd4_Set_Cursor(3,start+i);
     90a:	b8 01       	movw	r22, r16
     90c:	6e 5f       	subi	r22, 0xFE	; 254
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
			Lcd4_Write_Char(chr);
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
     920:	9f ef       	ldi	r25, 0xFF	; 255
     922:	24 e3       	ldi	r18, 0x34	; 52
     924:	8c e0       	ldi	r24, 0x0C	; 12
     926:	91 50       	subi	r25, 0x01	; 1
     928:	20 40       	sbci	r18, 0x00	; 0
     92a:	80 40       	sbci	r24, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <__stack+0xc7>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0xd1>
     930:	00 00       	nop
			_delay_ms(500);
			if(i==0){
     932:	01 15       	cp	r16, r1
     934:	11 05       	cpc	r17, r1
     936:	51 f4       	brne	.+20     	; 0x94c <__stack+0xed>
				hr=16*c;
     938:	74 01       	movw	r14, r8
     93a:	ee 0c       	add	r14, r14
     93c:	ff 1c       	adc	r15, r15
     93e:	ee 0c       	add	r14, r14
     940:	ff 1c       	adc	r15, r15
     942:	ee 0c       	add	r14, r14
     944:	ff 1c       	adc	r15, r15
     946:	ee 0c       	add	r14, r14
     948:	ff 1c       	adc	r15, r15
     94a:	2b c0       	rjmp	.+86     	; 0x9a2 <__stack+0x143>
			}else if(i==1){
     94c:	01 30       	cpi	r16, 0x01	; 1
     94e:	11 05       	cpc	r17, r1
     950:	19 f4       	brne	.+6      	; 0x958 <__stack+0xf9>
				hr+=c;
     952:	e8 0c       	add	r14, r8
     954:	f9 1c       	adc	r15, r9
     956:	25 c0       	rjmp	.+74     	; 0x9a2 <__stack+0x143>
			}else if(i==3){
     958:	03 30       	cpi	r16, 0x03	; 3
     95a:	11 05       	cpc	r17, r1
     95c:	51 f4       	brne	.+20     	; 0x972 <__stack+0x113>
				mn=16*c;
     95e:	64 01       	movw	r12, r8
     960:	cc 0c       	add	r12, r12
     962:	dd 1c       	adc	r13, r13
     964:	cc 0c       	add	r12, r12
     966:	dd 1c       	adc	r13, r13
     968:	cc 0c       	add	r12, r12
     96a:	dd 1c       	adc	r13, r13
     96c:	cc 0c       	add	r12, r12
     96e:	dd 1c       	adc	r13, r13
     970:	18 c0       	rjmp	.+48     	; 0x9a2 <__stack+0x143>
			}else if(i==4){
     972:	04 30       	cpi	r16, 0x04	; 4
     974:	11 05       	cpc	r17, r1
     976:	19 f4       	brne	.+6      	; 0x97e <__stack+0x11f>
				mn+=c;
     978:	c8 0c       	add	r12, r8
     97a:	d9 1c       	adc	r13, r9
     97c:	12 c0       	rjmp	.+36     	; 0x9a2 <__stack+0x143>
			}else if(i==6){
     97e:	06 30       	cpi	r16, 0x06	; 6
     980:	11 05       	cpc	r17, r1
     982:	51 f4       	brne	.+20     	; 0x998 <__stack+0x139>
				sc=16*c;
     984:	54 01       	movw	r10, r8
     986:	aa 0c       	add	r10, r10
     988:	bb 1c       	adc	r11, r11
     98a:	aa 0c       	add	r10, r10
     98c:	bb 1c       	adc	r11, r11
     98e:	aa 0c       	add	r10, r10
     990:	bb 1c       	adc	r11, r11
     992:	aa 0c       	add	r10, r10
     994:	bb 1c       	adc	r11, r11
     996:	05 c0       	rjmp	.+10     	; 0x9a2 <__stack+0x143>
			}else if(i==7){
     998:	07 30       	cpi	r16, 0x07	; 7
     99a:	11 05       	cpc	r17, r1
     99c:	11 f4       	brne	.+4      	; 0x9a2 <__stack+0x143>
				sc+=c;
     99e:	a8 0c       	add	r10, r8
     9a0:	b9 1c       	adc	r11, r9
			}
			i++;
     9a2:	0f 5f       	subi	r16, 0xFF	; 255
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
     9a6:	93 cf       	rjmp	.-218    	; 0x8ce <__stack+0x6f>
		}
	}
	RTC_Clock_Write(hr,mn,sc,hour_24);
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	4a 2d       	mov	r20, r10
     9ac:	6c 2d       	mov	r22, r12
     9ae:	8e 2d       	mov	r24, r14
     9b0:	0e 94 49 00 	call	0x92	; 0x92 <RTC_Clock_Write>
     9b4:	9f ef       	ldi	r25, 0xFF	; 255
     9b6:	2d e3       	ldi	r18, 0x3D	; 61
     9b8:	89 e4       	ldi	r24, 0x49	; 73
     9ba:	91 50       	subi	r25, 0x01	; 1
     9bc:	20 40       	sbci	r18, 0x00	; 0
     9be:	80 40       	sbci	r24, 0x00	; 0
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <__stack+0x15b>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <__stack+0x165>
     9c4:	00 00       	nop
	_delay_ms(3000);
}
     9c6:	65 96       	adiw	r28, 0x15	; 21
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	bf 90       	pop	r11
     9e4:	af 90       	pop	r10
     9e6:	9f 90       	pop	r9
     9e8:	8f 90       	pop	r8
     9ea:	08 95       	ret

000009ec <emergNum>:




void emergNum(){
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	2c 97       	sbiw	r28, 0x0c	; 12
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
	Lcd4_Set_Cursor(1,0);
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Enter the Number");
     a16:	86 e9       	ldi	r24, 0x96	; 150
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(3,1);
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_Char('+');
     a2a:	8b e2       	ldi	r24, 0x2B	; 43
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
	Lcd4_Write_String(phoneNumber);
     a32:	80 e6       	ldi	r24, 0x60	; 96
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(3,2);
     a3a:	62 e0       	ldi	r22, 0x02	; 2
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	char c;
	int i=0;
	char number[12];
	number[1] = '+';
     a46:	8b e2       	ldi	r24, 0x2B	; 43
     a48:	8a 83       	std	Y+2, r24	; 0x02
     a4a:	ce 01       	movw	r24, r28
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	6c 01       	movw	r12, r24
	Lcd4_Set_Cursor(3,1);
	Lcd4_Write_Char('+');
	Lcd4_Write_String(phoneNumber);
	Lcd4_Set_Cursor(3,2);
	char c;
	int i=0;
     a50:	e1 2c       	mov	r14, r1
     a52:	f1 2c       	mov	r15, r1
	char number[12];
	number[1] = '+';
	while(i<11){
		c= numberpressed();
     a54:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
     a58:	18 2f       	mov	r17, r24
     a5a:	ef e5       	ldi	r30, 0x5F	; 95
     a5c:	fa ee       	ldi	r31, 0xEA	; 234
     a5e:	31 97       	sbiw	r30, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <emergNum+0x72>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <emergNum+0x78>
     a64:	00 00       	nop
		_delay_ms(30);
		if(c=='*'){
     a66:	8a 32       	cpi	r24, 0x2A	; 42
     a68:	19 f4       	brne	.+6      	; 0xa70 <emergNum+0x84>
			msgSet();
     a6a:	0e 94 76 05 	call	0xaec	; 0xaec <msgSet>
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <emergNum+0x88>
		}
		if(c!='N'){
     a70:	8e 34       	cpi	r24, 0x4E	; 78
     a72:	c1 f0       	breq	.+48     	; 0xaa4 <emergNum+0xb8>
			Lcd4_Write_Char(c);
     a74:	81 2f       	mov	r24, r17
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
			number[i]=c;
     a7c:	f6 01       	movw	r30, r12
     a7e:	11 93       	st	Z+, r17
     a80:	6f 01       	movw	r12, r30
			i++;
     a82:	ff ef       	ldi	r31, 0xFF	; 255
     a84:	ef 1a       	sub	r14, r31
     a86:	ff 0a       	sbc	r15, r31
     a88:	2f ef       	ldi	r18, 0xFF	; 255
     a8a:	84 e3       	ldi	r24, 0x34	; 52
     a8c:	9c e0       	ldi	r25, 0x0C	; 12
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	80 40       	sbci	r24, 0x00	; 0
     a92:	90 40       	sbci	r25, 0x00	; 0
     a94:	e1 f7       	brne	.-8      	; 0xa8e <emergNum+0xa2>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <emergNum+0xac>
     a98:	00 00       	nop
	Lcd4_Set_Cursor(3,2);
	char c;
	int i=0;
	char number[12];
	number[1] = '+';
	while(i<11){
     a9a:	eb e0       	ldi	r30, 0x0B	; 11
     a9c:	ee 16       	cp	r14, r30
     a9e:	f1 04       	cpc	r15, r1
     aa0:	c9 f6       	brne	.-78     	; 0xa54 <emergNum+0x68>
     aa2:	04 c0       	rjmp	.+8      	; 0xaac <emergNum+0xc0>
     aa4:	fb e0       	ldi	r31, 0x0B	; 11
     aa6:	ef 16       	cp	r14, r31
     aa8:	f1 04       	cpc	r15, r1
     aaa:	a4 f2       	brlt	.-88     	; 0xa54 <emergNum+0x68>
			number[i]=c;
			i++;
			_delay_ms(500);
		}
	}
	memcpy(phoneNumber,number, strlen(number)+1);
     aac:	be 01       	movw	r22, r28
     aae:	6f 5f       	subi	r22, 0xFF	; 255
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	fb 01       	movw	r30, r22
     ab4:	01 90       	ld	r0, Z+
     ab6:	00 20       	and	r0, r0
     ab8:	e9 f7       	brne	.-6      	; 0xab4 <emergNum+0xc8>
     aba:	af 01       	movw	r20, r30
     abc:	46 1b       	sub	r20, r22
     abe:	57 0b       	sbc	r21, r23
     ac0:	80 e6       	ldi	r24, 0x60	; 96
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 19 08 	call	0x1032	; 0x1032 <memcpy>
	msgSet();
     ac8:	0e 94 76 05 	call	0xaec	; 0xaec <msgSet>
	Lcd4_Clear();
     acc:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
     ad0:	2c 96       	adiw	r28, 0x0c	; 12
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	08 95       	ret

00000aec <msgSet>:




void msgSet(){
	Lcd4_Set_Cursor(1,0);
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("MESSAGE SETTINGS");
     af8:	8c eb       	ldi	r24, 0xBC	; 188
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("1.EMERGENCY NUMBER");
     b0c:	87 ea       	ldi	r24, 0xA7	; 167
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	char c = numberpressed();
     b14:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
	if(c=='*'){
     b18:	8a 32       	cpi	r24, 0x2A	; 42
     b1a:	29 f4       	brne	.+10     	; 0xb26 <msgSet+0x3a>
		Lcd4_Clear();
     b1c:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		Menu();
     b20:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Menu>
     b24:	08 95       	ret
	}else if(c=='1'){
     b26:	81 33       	cpi	r24, 0x31	; 49
     b28:	29 f4       	brne	.+10     	; 0xb34 <msgSet+0x48>
		Lcd4_Clear();
     b2a:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		emergNum();
     b2e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <emergNum>
     b32:	08 95       	ret
	}else{
		msgSet();
     b34:	0e 94 76 05 	call	0xaec	; 0xaec <msgSet>
     b38:	08 95       	ret

00000b3a <sysSet>:
void doseHour(){
	
}

void sysSet(){
	Lcd4_Set_Cursor(1,0);
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("SYSTEM SETTINGS");
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("1.MESSAGE SETTINGS");
     b5a:	8a eb       	ldi	r24, 0xBA	; 186
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(3,2);
     b62:	62 e0       	ldi	r22, 0x02	; 2
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("2.TIME AND DATE");
     b6e:	8d ec       	ldi	r24, 0xCD	; 205
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	char c= numberpressed();
     b76:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
     b7a:	ef e1       	ldi	r30, 0x1F	; 31
     b7c:	fe e4       	ldi	r31, 0x4E	; 78
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <sysSet+0x44>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <sysSet+0x4a>
     b84:	00 00       	nop
	_delay_ms(10);
	if(c=='1'){
     b86:	81 33       	cpi	r24, 0x31	; 49
     b88:	29 f4       	brne	.+10     	; 0xb94 <sysSet+0x5a>
		Lcd4_Clear();
     b8a:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		msgSet();
     b8e:	0e 94 76 05 	call	0xaec	; 0xaec <msgSet>
     b92:	08 95       	ret
		}else if(c=='2'){
     b94:	82 33       	cpi	r24, 0x32	; 50
     b96:	29 f4       	brne	.+10     	; 0xba2 <sysSet+0x68>
		Lcd4_Clear();
     b98:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		rtc();
     b9c:	0e 94 75 07 	call	0xeea	; 0xeea <rtc>
     ba0:	08 95       	ret
		}else if(c=='*'){
     ba2:	8a 32       	cpi	r24, 0x2A	; 42
     ba4:	29 f4       	brne	.+10     	; 0xbb0 <sysSet+0x76>
		Lcd4_Clear();
     ba6:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		Menu();
     baa:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Menu>
     bae:	08 95       	ret
		}else{
		sysSet();
     bb0:	0e 94 9d 05 	call	0xb3a	; 0xb3a <sysSet>
     bb4:	08 95       	ret

00000bb6 <Menu>:
void Menu(){
	
	char c;
	
	
	Lcd4_Set_Cursor(2,3);
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("1.DOSE SCHEDULE");
     bc2:	8d ed       	ldi	r24, 0xDD	; 221
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(3,3);
     bca:	63 e0       	ldi	r22, 0x03	; 3
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("2.DOSE SETTINGS");
     bd6:	8d ee       	ldi	r24, 0xED	; 237
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(4,3);
     bde:	63 e0       	ldi	r22, 0x03	; 3
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("3.SYSTEM SETTINGS");
     bea:	8d ef       	ldi	r24, 0xFD	; 253
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(1,2);
     bf2:	62 e0       	ldi	r22, 0x02	; 2
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("SELECT OPTION");
     bfe:	8f e0       	ldi	r24, 0x0F	; 15
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c06:	85 e8       	ldi	r24, 0x85	; 133
     c08:	8a 95       	dec	r24
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <Menu+0x52>
     c0c:	00 00       	nop
	_delay_us(50);
	
	c = numberpressed();
     c0e:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
	
	if(c=='1'){
     c12:	81 33       	cpi	r24, 0x31	; 49
     c14:	29 f4       	brne	.+10     	; 0xc20 <Menu+0x6a>
		Lcd4_Clear();
     c16:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		schedule();
     c1a:	0e 94 21 06 	call	0xc42	; 0xc42 <schedule>
     c1e:	08 95       	ret
	}else if(c=='2'){
     c20:	82 33       	cpi	r24, 0x32	; 50
     c22:	29 f4       	brne	.+10     	; 0xc2e <Menu+0x78>
		Lcd4_Clear();
     c24:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		doseSet();
     c28:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <doseSet>
     c2c:	08 95       	ret
	}else if(c=='3'){
     c2e:	83 33       	cpi	r24, 0x33	; 51
     c30:	29 f4       	brne	.+10     	; 0xc3c <Menu+0x86>
		Lcd4_Clear();
     c32:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		sysSet();
     c36:	0e 94 9d 05 	call	0xb3a	; 0xb3a <sysSet>
     c3a:	08 95       	ret
	}else{
		Menu();
     c3c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Menu>
     c40:	08 95       	ret

00000c42 <schedule>:
}


void schedule(){
	
	Lcd4_Set_Cursor(1,0);
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("DOSE SCHEDULE");
     c4e:	8f ed       	ldi	r24, 0xDF	; 223
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,2);
     c56:	62 e0       	ldi	r22, 0x02	; 2
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("T1  08:00");
     c62:	8d e1       	ldi	r24, 0x1D	; 29
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(3,2);
     c6a:	62 e0       	ldi	r22, 0x02	; 2
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("T2  08:00");
     c76:	87 e2       	ldi	r24, 0x27	; 39
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(4,2);
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("T3  10:00");
     c8a:	81 e3       	ldi	r24, 0x31	; 49
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c92:	8f e1       	ldi	r24, 0x1F	; 31
     c94:	9e e4       	ldi	r25, 0x4E	; 78
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <schedule+0x54>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <schedule+0x5a>
     c9c:	00 00       	nop
	
	_delay_ms(10);
	char c = numberpressed();
     c9e:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
	if(c=='*'){
     ca2:	8a 32       	cpi	r24, 0x2A	; 42
     ca4:	29 f4       	brne	.+10     	; 0xcb0 <schedule+0x6e>
		Lcd4_Clear();
     ca6:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		Menu();
     caa:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Menu>
     cae:	08 95       	ret
		}else{
		schedule();
     cb0:	0e 94 21 06 	call	0xc42	; 0xc42 <schedule>
     cb4:	08 95       	ret

00000cb6 <doseSet>:
	}
	
	
}

void doseSet(){
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
	int count=0;
	Lcd4_Set_Cursor(1,0);
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("DOSE SETTINGS");
     cca:	8f ee       	ldi	r24, 0xEF	; 239
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	
	Lcd4_Set_Cursor(2,2);
     cd2:	62 e0       	ldi	r22, 0x02	; 2
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Drug Count - ");
     cde:	8b e3       	ldi	r24, 0x3B	; 59
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	
	char c = numberpressed();
     ce6:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
     cea:	ef e1       	ldi	r30, 0x1F	; 31
     cec:	fe e4       	ldi	r31, 0x4E	; 78
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <doseSet+0x38>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <doseSet+0x3e>
     cf4:	00 00       	nop
	_delay_ms(10);
	if(c=='*'){
     cf6:	8a 32       	cpi	r24, 0x2A	; 42
     cf8:	29 f4       	brne	.+10     	; 0xd04 <doseSet+0x4e>
		Lcd4_Clear();
     cfa:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		Menu();
     cfe:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Menu>
     d02:	2b c0       	rjmp	.+86     	; 0xd5a <doseSet+0xa4>
		}else if(c!='N'){
     d04:	8e 34       	cpi	r24, 0x4E	; 78
     d06:	39 f1       	breq	.+78     	; 0xd56 <doseSet+0xa0>
		count = atoi(c);
     d08:	c8 2f       	mov	r28, r24
     d0a:	d0 e0       	ldi	r29, 0x00	; 0
     d0c:	ce 01       	movw	r24, r28
     d0e:	0e 94 fb 07 	call	0xff6	; 0xff6 <atoi>
     d12:	8c 01       	movw	r16, r24
		Lcd4_Set_Cursor(3,9);
     d14:	69 e0       	ldi	r22, 0x09	; 9
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
		Lcd4_Write_Char(c);
     d20:	ce 01       	movw	r24, r28
     d22:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Write_Char>
     d26:	ff ef       	ldi	r31, 0xFF	; 255
     d28:	29 e6       	ldi	r18, 0x69	; 105
     d2a:	88 e1       	ldi	r24, 0x18	; 24
     d2c:	f1 50       	subi	r31, 0x01	; 1
     d2e:	20 40       	sbci	r18, 0x00	; 0
     d30:	80 40       	sbci	r24, 0x00	; 0
     d32:	e1 f7       	brne	.-8      	; 0xd2c <doseSet+0x76>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <doseSet+0x80>
     d36:	00 00       	nop
		_delay_ms(1000);
		int i=0;
		while(i<count){
     d38:	10 16       	cp	r1, r16
     d3a:	11 06       	cpc	r1, r17
     d3c:	74 f4       	brge	.+28     	; 0xd5a <doseSet+0xa4>
     d3e:	c0 e0       	ldi	r28, 0x00	; 0
     d40:	d0 e0       	ldi	r29, 0x00	; 0
			Lcd4_Clear();
     d42:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
			doseTime(i);
     d46:	ce 01       	movw	r24, r28
     d48:	0e 94 b2 06 	call	0xd64	; 0xd64 <doseTime>
			i++;
     d4c:	21 96       	adiw	r28, 0x01	; 1
		count = atoi(c);
		Lcd4_Set_Cursor(3,9);
		Lcd4_Write_Char(c);
		_delay_ms(1000);
		int i=0;
		while(i<count){
     d4e:	0c 17       	cp	r16, r28
     d50:	1d 07       	cpc	r17, r29
     d52:	b9 f7       	brne	.-18     	; 0xd42 <doseSet+0x8c>
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <doseSet+0xa4>
			Lcd4_Clear();
			doseTime(i);
			i++;
		}
		}else{
		doseSet();
     d56:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <doseSet>
	}
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <doseTime>:

void doseTime(int i){
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	1f 92       	push	r1
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	8c 01       	movw	r16, r24
	char chInt;
	itoa(i,&chInt,10);
     d74:	4a e0       	ldi	r20, 0x0A	; 10
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	be 01       	movw	r22, r28
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	0e 94 22 08 	call	0x1044	; 0x1044 <itoa>
	Lcd4_Set_Cursor(1,0);
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Type ");
     d8e:	89 e4       	ldi	r24, 0x49	; 73
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Write_String(chInt);
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(3,2);
     d9e:	62 e0       	ldi	r22, 0x02	; 2
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("1.Day");
     daa:	8f e4       	ldi	r24, 0x4F	; 79
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(4,2);
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	84 e0       	ldi	r24, 0x04	; 4
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("2.Hour");
     dbe:	85 e5       	ldi	r24, 0x55	; 85
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	char c=numberpressed();
     dc6:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
	if(c=='*'){
     dca:	8a 32       	cpi	r24, 0x2A	; 42
     dcc:	21 f4       	brne	.+8      	; 0xdd6 <doseTime+0x72>
		doseSet(i);
     dce:	c8 01       	movw	r24, r16
     dd0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <doseSet>
     dd4:	10 c0       	rjmp	.+32     	; 0xdf6 <doseTime+0x92>
		}else if(c=='1'){
     dd6:	81 33       	cpi	r24, 0x31	; 49
     dd8:	31 f4       	brne	.+12     	; 0xde6 <doseTime+0x82>
		Lcd4_Clear();
     dda:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		doseDay(i);
     dde:	c8 01       	movw	r24, r16
     de0:	0e 94 01 07 	call	0xe02	; 0xe02 <doseDay>
     de4:	08 c0       	rjmp	.+16     	; 0xdf6 <doseTime+0x92>
		}else if(c=='2'){
     de6:	82 33       	cpi	r24, 0x32	; 50
     de8:	19 f4       	brne	.+6      	; 0xdf0 <doseTime+0x8c>
		Lcd4_Clear();
     dea:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <doseTime+0x92>
		doseHour(i);
		}else{
		doseTime(i);
     df0:	c8 01       	movw	r24, r16
     df2:	0e 94 b2 06 	call	0xd64	; 0xd64 <doseTime>
	}
}
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <doseDay>:

void doseDay(int i){
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	1f 92       	push	r1
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	8c 01       	movw	r16, r24
	int mrn,afr,ngt;
	Lcd4_Set_Cursor(1,0);
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Day Dose");
     e1e:	8c e5       	ldi	r24, 0x5C	; 92
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(3,2);
     e26:	62 e0       	ldi	r22, 0x02	; 2
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Morning  ");
     e32:	85 e6       	ldi	r24, 0x65	; 101
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
     e3a:	8f e1       	ldi	r24, 0x1F	; 31
     e3c:	9e e4       	ldi	r25, 0x4E	; 78
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <doseDay+0x3c>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <doseDay+0x42>
     e44:	00 00       	nop
	_delay_ms(10);
	char ch = numberpressed();
     e46:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
     e4a:	89 83       	std	Y+1, r24	; 0x01
	if(ch=='*'){
     e4c:	8a 32       	cpi	r24, 0x2A	; 42
     e4e:	21 f4       	brne	.+8      	; 0xe58 <doseDay+0x56>
		doseTime(i);			//under construction
     e50:	c8 01       	movw	r24, r16
     e52:	0e 94 b2 06 	call	0xd64	; 0xd64 <doseTime>
     e56:	43 c0       	rjmp	.+134    	; 0xede <doseDay+0xdc>
		}else if(ch!='N'){
     e58:	8e 34       	cpi	r24, 0x4E	; 78
     e5a:	f1 f1       	breq	.+124    	; 0xed8 <doseDay+0xd6>
		mrn=atoi(&ch);
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	0e 94 fb 07 	call	0xff6	; 0xff6 <atoi>
     e64:	9f ef       	ldi	r25, 0xFF	; 255
     e66:	29 e6       	ldi	r18, 0x69	; 105
     e68:	88 e1       	ldi	r24, 0x18	; 24
     e6a:	91 50       	subi	r25, 0x01	; 1
     e6c:	20 40       	sbci	r18, 0x00	; 0
     e6e:	80 40       	sbci	r24, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <doseDay+0x68>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <doseDay+0x72>
     e74:	00 00       	nop
     e76:	8f e1       	ldi	r24, 0x1F	; 31
     e78:	9e e4       	ldi	r25, 0x4E	; 78
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <doseDay+0x78>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <doseDay+0x7e>
     e80:	00 00       	nop
		_delay_ms(1000);
		while(1){
			_delay_ms(10);
			ch=numberpressed();
     e82:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
     e86:	89 83       	std	Y+1, r24	; 0x01
			if(ch!='N'){
     e88:	8e 34       	cpi	r24, 0x4E	; 78
     e8a:	a9 f3       	breq	.-22     	; 0xe76 <doseDay+0x74>
				afr=atoi(&ch);
     e8c:	ce 01       	movw	r24, r28
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	0e 94 fb 07 	call	0xff6	; 0xff6 <atoi>
     e94:	9f ef       	ldi	r25, 0xFF	; 255
     e96:	29 e6       	ldi	r18, 0x69	; 105
     e98:	88 e1       	ldi	r24, 0x18	; 24
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	20 40       	sbci	r18, 0x00	; 0
     e9e:	80 40       	sbci	r24, 0x00	; 0
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <doseDay+0x98>
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <doseDay+0xa2>
     ea4:	00 00       	nop
     ea6:	8f e1       	ldi	r24, 0x1F	; 31
     ea8:	9e e4       	ldi	r25, 0x4E	; 78
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <doseDay+0xa8>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <doseDay+0xae>
     eb0:	00 00       	nop
				_delay_ms(1000);
				while(1){
					_delay_ms(10);
					ch=numberpressed();
     eb2:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
     eb6:	89 83       	std	Y+1, r24	; 0x01
					if(ch!='N'){
     eb8:	8e 34       	cpi	r24, 0x4E	; 78
     eba:	a9 f3       	breq	.-22     	; 0xea6 <doseDay+0xa4>
						ngt=atoi(&ch);
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	0e 94 fb 07 	call	0xff6	; 0xff6 <atoi>
     ec4:	9f ef       	ldi	r25, 0xFF	; 255
     ec6:	29 e6       	ldi	r18, 0x69	; 105
     ec8:	88 e1       	ldi	r24, 0x18	; 24
     eca:	91 50       	subi	r25, 0x01	; 1
     ecc:	20 40       	sbci	r18, 0x00	; 0
     ece:	80 40       	sbci	r24, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <doseDay+0xc8>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <doseDay+0xd2>
     ed4:	00 00       	nop
     ed6:	03 c0       	rjmp	.+6      	; 0xede <doseDay+0xdc>
				break;
			}
		}
		
		}else{
		doseDay(i);
     ed8:	c8 01       	movw	r24, r16
     eda:	0e 94 01 07 	call	0xe02	; 0xe02 <doseDay>
	}
	
}
     ede:	0f 90       	pop	r0
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	08 95       	ret

00000eea <rtc>:
}



void rtc(){
	Lcd4_Set_Cursor(1,0);
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("DATE AND TIME");
     ef6:	8f e6       	ldi	r24, 0x6F	; 111
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("1.SET DATE");
     f0a:	8d e7       	ldi	r24, 0x7D	; 125
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	Lcd4_Set_Cursor(3,0);
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 b1 02 	call	0x562	; 0x562 <Lcd4_Set_Cursor>
	Lcd4_Write_String("2.SET TIME");
     f1e:	88 e8       	ldi	r24, 0x88	; 136
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 5f 03 	call	0x6be	; 0x6be <Lcd4_Write_String>
	char c = numberpressed();
     f26:	0e 94 b1 07 	call	0xf62	; 0xf62 <numberpressed>
     f2a:	ef e1       	ldi	r30, 0x1F	; 31
     f2c:	fe e4       	ldi	r31, 0x4E	; 78
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <rtc+0x44>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <rtc+0x4a>
     f34:	00 00       	nop
	_delay_ms(10);
	if(c=='*'){
     f36:	8a 32       	cpi	r24, 0x2A	; 42
     f38:	29 f4       	brne	.+10     	; 0xf44 <rtc+0x5a>
		Lcd4_Clear();
     f3a:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		sysSet();
     f3e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <sysSet>
     f42:	08 95       	ret
		}else if(c=='1'){
     f44:	81 33       	cpi	r24, 0x31	; 49
     f46:	19 f4       	brne	.+6      	; 0xf4e <rtc+0x64>
		Lcd4_Clear();
     f48:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
     f4c:	08 95       	ret
		setDate();
		}else if(c=='2'){
     f4e:	82 33       	cpi	r24, 0x32	; 50
     f50:	29 f4       	brne	.+10     	; 0xf5c <rtc+0x72>
		Lcd4_Clear();
     f52:	0e 94 a0 02 	call	0x540	; 0x540 <Lcd4_Clear>
		setTime();
     f56:	0e 94 1b 04 	call	0x836	; 0x836 <setTime>
     f5a:	08 95       	ret
		}else{
		rtc();
     f5c:	0e 94 75 07 	call	0xeea	; 0xeea <rtc>
     f60:	08 95       	ret

00000f62 <numberpressed>:



char numberpressed()
{
	PORTA = 0b10000000;
     f62:	80 e8       	ldi	r24, 0x80	; 128
     f64:	8b bb       	out	0x1b, r24	; 27
	if(PINA & (1<<PA0))
     f66:	c8 99       	sbic	0x19, 0	; 25
     f68:	26 c0       	rjmp	.+76     	; 0xfb6 <numberpressed+0x54>
	{
		return 'a';
	}
	if(PINA & (1<<PA1))
     f6a:	c9 99       	sbic	0x19, 1	; 25
     f6c:	26 c0       	rjmp	.+76     	; 0xfba <numberpressed+0x58>
	{
		return '3';
	}
	if(PINA & (1<<PA2))
     f6e:	ca 99       	sbic	0x19, 2	; 25
     f70:	26 c0       	rjmp	.+76     	; 0xfbe <numberpressed+0x5c>
	{
		return '2';
	}
	if(PINA & (1<<PA3))
     f72:	cb 99       	sbic	0x19, 3	; 25
     f74:	26 c0       	rjmp	.+76     	; 0xfc2 <numberpressed+0x60>
	{
		return '1';
	}
	
	PORTA = 0b01000000;
     f76:	80 e4       	ldi	r24, 0x40	; 64
     f78:	8b bb       	out	0x1b, r24	; 27
	if(PINA & (1<<PA0))
     f7a:	c8 99       	sbic	0x19, 0	; 25
     f7c:	24 c0       	rjmp	.+72     	; 0xfc6 <numberpressed+0x64>
	{
		return 'b';
	}
	if(PINA & (1<<PA1))
     f7e:	c9 99       	sbic	0x19, 1	; 25
     f80:	24 c0       	rjmp	.+72     	; 0xfca <numberpressed+0x68>
	{
		return '6';
	}
	if(PINA & (1<<PA2))
     f82:	ca 99       	sbic	0x19, 2	; 25
     f84:	24 c0       	rjmp	.+72     	; 0xfce <numberpressed+0x6c>
	{
		return '5';
	}
	if(PINA & (1<<PA3))
     f86:	cb 99       	sbic	0x19, 3	; 25
     f88:	24 c0       	rjmp	.+72     	; 0xfd2 <numberpressed+0x70>
	{
		return '4';
	}
	PORTA = 0b00100000;
     f8a:	80 e2       	ldi	r24, 0x20	; 32
     f8c:	8b bb       	out	0x1b, r24	; 27
	if(PINA & (1<<PA0))
     f8e:	c8 99       	sbic	0x19, 0	; 25
     f90:	22 c0       	rjmp	.+68     	; 0xfd6 <numberpressed+0x74>
	{
		return 'c';
	}
	if(PINA & (1<<PA1))
     f92:	c9 99       	sbic	0x19, 1	; 25
     f94:	22 c0       	rjmp	.+68     	; 0xfda <numberpressed+0x78>
	{
		return '9';
	}
	if(PINA & (1<<PA2))
     f96:	ca 99       	sbic	0x19, 2	; 25
     f98:	22 c0       	rjmp	.+68     	; 0xfde <numberpressed+0x7c>
	{
		return '8';
	}
	if(PINA & (1<<PA3))
     f9a:	cb 99       	sbic	0x19, 3	; 25
     f9c:	22 c0       	rjmp	.+68     	; 0xfe2 <numberpressed+0x80>
	{
		return '7';
	}
	PORTA = 0b00010000;
     f9e:	80 e1       	ldi	r24, 0x10	; 16
     fa0:	8b bb       	out	0x1b, r24	; 27
	if(PINA & (1<<PA0))
     fa2:	c8 99       	sbic	0x19, 0	; 25
     fa4:	20 c0       	rjmp	.+64     	; 0xfe6 <numberpressed+0x84>
	{
		return 'd';
	}
	if(PINA & (1<<PA1))
     fa6:	c9 99       	sbic	0x19, 1	; 25
     fa8:	20 c0       	rjmp	.+64     	; 0xfea <numberpressed+0x88>
	{
		return '#';
	}
	if(PINA & (1<<PA2))
     faa:	ca 99       	sbic	0x19, 2	; 25
     fac:	20 c0       	rjmp	.+64     	; 0xfee <numberpressed+0x8c>
	{
		return '0';
	}
	if(PINA & (1<<PA3))
     fae:	cb 99       	sbic	0x19, 3	; 25
     fb0:	20 c0       	rjmp	.+64     	; 0xff2 <numberpressed+0x90>
	{
		return '*';
	}
	
	return 'N';
     fb2:	8e e4       	ldi	r24, 0x4E	; 78
     fb4:	08 95       	ret
char numberpressed()
{
	PORTA = 0b10000000;
	if(PINA & (1<<PA0))
	{
		return 'a';
     fb6:	81 e6       	ldi	r24, 0x61	; 97
     fb8:	08 95       	ret
	}
	if(PINA & (1<<PA1))
	{
		return '3';
     fba:	83 e3       	ldi	r24, 0x33	; 51
     fbc:	08 95       	ret
	}
	if(PINA & (1<<PA2))
	{
		return '2';
     fbe:	82 e3       	ldi	r24, 0x32	; 50
     fc0:	08 95       	ret
	}
	if(PINA & (1<<PA3))
	{
		return '1';
     fc2:	81 e3       	ldi	r24, 0x31	; 49
     fc4:	08 95       	ret
	}
	
	PORTA = 0b01000000;
	if(PINA & (1<<PA0))
	{
		return 'b';
     fc6:	82 e6       	ldi	r24, 0x62	; 98
     fc8:	08 95       	ret
	}
	if(PINA & (1<<PA1))
	{
		return '6';
     fca:	86 e3       	ldi	r24, 0x36	; 54
     fcc:	08 95       	ret
	}
	if(PINA & (1<<PA2))
	{
		return '5';
     fce:	85 e3       	ldi	r24, 0x35	; 53
     fd0:	08 95       	ret
	}
	if(PINA & (1<<PA3))
	{
		return '4';
     fd2:	84 e3       	ldi	r24, 0x34	; 52
     fd4:	08 95       	ret
	}
	PORTA = 0b00100000;
	if(PINA & (1<<PA0))
	{
		return 'c';
     fd6:	83 e6       	ldi	r24, 0x63	; 99
     fd8:	08 95       	ret
	}
	if(PINA & (1<<PA1))
	{
		return '9';
     fda:	89 e3       	ldi	r24, 0x39	; 57
     fdc:	08 95       	ret
	}
	if(PINA & (1<<PA2))
	{
		return '8';
     fde:	88 e3       	ldi	r24, 0x38	; 56
     fe0:	08 95       	ret
	}
	if(PINA & (1<<PA3))
	{
		return '7';
     fe2:	87 e3       	ldi	r24, 0x37	; 55
     fe4:	08 95       	ret
	}
	PORTA = 0b00010000;
	if(PINA & (1<<PA0))
	{
		return 'd';
     fe6:	84 e6       	ldi	r24, 0x64	; 100
     fe8:	08 95       	ret
	}
	if(PINA & (1<<PA1))
	{
		return '#';
     fea:	83 e2       	ldi	r24, 0x23	; 35
     fec:	08 95       	ret
	}
	if(PINA & (1<<PA2))
	{
		return '0';
     fee:	80 e3       	ldi	r24, 0x30	; 48
     ff0:	08 95       	ret
	}
	if(PINA & (1<<PA3))
	{
		return '*';
     ff2:	8a e2       	ldi	r24, 0x2A	; 42
	}
	
	return 'N';
}
     ff4:	08 95       	ret

00000ff6 <atoi>:
     ff6:	fc 01       	movw	r30, r24
     ff8:	88 27       	eor	r24, r24
     ffa:	99 27       	eor	r25, r25
     ffc:	e8 94       	clt
     ffe:	21 91       	ld	r18, Z+
    1000:	20 32       	cpi	r18, 0x20	; 32
    1002:	e9 f3       	breq	.-6      	; 0xffe <atoi+0x8>
    1004:	29 30       	cpi	r18, 0x09	; 9
    1006:	10 f0       	brcs	.+4      	; 0x100c <atoi+0x16>
    1008:	2e 30       	cpi	r18, 0x0E	; 14
    100a:	c8 f3       	brcs	.-14     	; 0xffe <atoi+0x8>
    100c:	2b 32       	cpi	r18, 0x2B	; 43
    100e:	41 f0       	breq	.+16     	; 0x1020 <atoi+0x2a>
    1010:	2d 32       	cpi	r18, 0x2D	; 45
    1012:	39 f4       	brne	.+14     	; 0x1022 <atoi+0x2c>
    1014:	68 94       	set
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <atoi+0x2a>
    1018:	0e 94 38 08 	call	0x1070	; 0x1070 <__mulhi_const_10>
    101c:	82 0f       	add	r24, r18
    101e:	91 1d       	adc	r25, r1
    1020:	21 91       	ld	r18, Z+
    1022:	20 53       	subi	r18, 0x30	; 48
    1024:	2a 30       	cpi	r18, 0x0A	; 10
    1026:	c0 f3       	brcs	.-16     	; 0x1018 <atoi+0x22>
    1028:	1e f4       	brtc	.+6      	; 0x1030 <atoi+0x3a>
    102a:	90 95       	com	r25
    102c:	81 95       	neg	r24
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	08 95       	ret

00001032 <memcpy>:
    1032:	fb 01       	movw	r30, r22
    1034:	dc 01       	movw	r26, r24
    1036:	02 c0       	rjmp	.+4      	; 0x103c <memcpy+0xa>
    1038:	01 90       	ld	r0, Z+
    103a:	0d 92       	st	X+, r0
    103c:	41 50       	subi	r20, 0x01	; 1
    103e:	50 40       	sbci	r21, 0x00	; 0
    1040:	d8 f7       	brcc	.-10     	; 0x1038 <memcpy+0x6>
    1042:	08 95       	ret

00001044 <itoa>:
    1044:	45 32       	cpi	r20, 0x25	; 37
    1046:	51 05       	cpc	r21, r1
    1048:	20 f4       	brcc	.+8      	; 0x1052 <itoa+0xe>
    104a:	42 30       	cpi	r20, 0x02	; 2
    104c:	10 f0       	brcs	.+4      	; 0x1052 <itoa+0xe>
    104e:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__itoa_ncheck>
    1052:	fb 01       	movw	r30, r22
    1054:	10 82       	st	Z, r1
    1056:	cb 01       	movw	r24, r22
    1058:	08 95       	ret

0000105a <__itoa_ncheck>:
    105a:	bb 27       	eor	r27, r27
    105c:	4a 30       	cpi	r20, 0x0A	; 10
    105e:	31 f4       	brne	.+12     	; 0x106c <__itoa_ncheck+0x12>
    1060:	99 23       	and	r25, r25
    1062:	22 f4       	brpl	.+8      	; 0x106c <__itoa_ncheck+0x12>
    1064:	bd e2       	ldi	r27, 0x2D	; 45
    1066:	90 95       	com	r25
    1068:	81 95       	neg	r24
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__utoa_common>

00001070 <__mulhi_const_10>:
    1070:	7a e0       	ldi	r23, 0x0A	; 10
    1072:	97 9f       	mul	r25, r23
    1074:	90 2d       	mov	r25, r0
    1076:	87 9f       	mul	r24, r23
    1078:	80 2d       	mov	r24, r0
    107a:	91 0d       	add	r25, r1
    107c:	11 24       	eor	r1, r1
    107e:	08 95       	ret

00001080 <__utoa_ncheck>:
    1080:	bb 27       	eor	r27, r27

00001082 <__utoa_common>:
    1082:	fb 01       	movw	r30, r22
    1084:	55 27       	eor	r21, r21
    1086:	aa 27       	eor	r26, r26
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	aa 1f       	adc	r26, r26
    108e:	a4 17       	cp	r26, r20
    1090:	10 f0       	brcs	.+4      	; 0x1096 <__utoa_common+0x14>
    1092:	a4 1b       	sub	r26, r20
    1094:	83 95       	inc	r24
    1096:	50 51       	subi	r21, 0x10	; 16
    1098:	b9 f7       	brne	.-18     	; 0x1088 <__utoa_common+0x6>
    109a:	a0 5d       	subi	r26, 0xD0	; 208
    109c:	aa 33       	cpi	r26, 0x3A	; 58
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <__utoa_common+0x20>
    10a0:	a9 5d       	subi	r26, 0xD9	; 217
    10a2:	a1 93       	st	Z+, r26
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	79 f7       	brne	.-34     	; 0x1086 <__utoa_common+0x4>
    10a8:	b1 11       	cpse	r27, r1
    10aa:	b1 93       	st	Z+, r27
    10ac:	11 92       	st	Z+, r1
    10ae:	cb 01       	movw	r24, r22
    10b0:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <strrev>

000010b4 <sprintf>:
    10b4:	ae e0       	ldi	r26, 0x0E	; 14
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e0 e6       	ldi	r30, 0x60	; 96
    10ba:	f8 e0       	ldi	r31, 0x08	; 8
    10bc:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__prologue_saves__+0x1c>
    10c0:	0d 89       	ldd	r16, Y+21	; 0x15
    10c2:	1e 89       	ldd	r17, Y+22	; 0x16
    10c4:	86 e0       	ldi	r24, 0x06	; 6
    10c6:	8c 83       	std	Y+4, r24	; 0x04
    10c8:	1a 83       	std	Y+2, r17	; 0x02
    10ca:	09 83       	std	Y+1, r16	; 0x01
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	9f e7       	ldi	r25, 0x7F	; 127
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	ae 01       	movw	r20, r28
    10d6:	47 5e       	subi	r20, 0xE7	; 231
    10d8:	5f 4f       	sbci	r21, 0xFF	; 255
    10da:	6f 89       	ldd	r22, Y+23	; 0x17
    10dc:	78 8d       	ldd	r23, Y+24	; 0x18
    10de:	ce 01       	movw	r24, r28
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <vfprintf>
    10e6:	ef 81       	ldd	r30, Y+7	; 0x07
    10e8:	f8 85       	ldd	r31, Y+8	; 0x08
    10ea:	e0 0f       	add	r30, r16
    10ec:	f1 1f       	adc	r31, r17
    10ee:	10 82       	st	Z, r1
    10f0:	2e 96       	adiw	r28, 0x0e	; 14
    10f2:	e4 e0       	ldi	r30, 0x04	; 4
    10f4:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__epilogue_restores__+0x1c>

000010f8 <vfprintf>:
    10f8:	ab e0       	ldi	r26, 0x0B	; 11
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e8       	ldi	r30, 0x82	; 130
    10fe:	f8 e0       	ldi	r31, 0x08	; 8
    1100:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__prologue_saves__>
    1104:	6c 01       	movw	r12, r24
    1106:	7b 01       	movw	r14, r22
    1108:	8a 01       	movw	r16, r20
    110a:	fc 01       	movw	r30, r24
    110c:	17 82       	std	Z+7, r1	; 0x07
    110e:	16 82       	std	Z+6, r1	; 0x06
    1110:	83 81       	ldd	r24, Z+3	; 0x03
    1112:	81 ff       	sbrs	r24, 1
    1114:	cc c1       	rjmp	.+920    	; 0x14ae <vfprintf+0x3b6>
    1116:	ce 01       	movw	r24, r28
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	3c 01       	movw	r6, r24
    111c:	f6 01       	movw	r30, r12
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	f7 01       	movw	r30, r14
    1122:	93 fd       	sbrc	r25, 3
    1124:	85 91       	lpm	r24, Z+
    1126:	93 ff       	sbrs	r25, 3
    1128:	81 91       	ld	r24, Z+
    112a:	7f 01       	movw	r14, r30
    112c:	88 23       	and	r24, r24
    112e:	09 f4       	brne	.+2      	; 0x1132 <vfprintf+0x3a>
    1130:	ba c1       	rjmp	.+884    	; 0x14a6 <vfprintf+0x3ae>
    1132:	85 32       	cpi	r24, 0x25	; 37
    1134:	39 f4       	brne	.+14     	; 0x1144 <vfprintf+0x4c>
    1136:	93 fd       	sbrc	r25, 3
    1138:	85 91       	lpm	r24, Z+
    113a:	93 ff       	sbrs	r25, 3
    113c:	81 91       	ld	r24, Z+
    113e:	7f 01       	movw	r14, r30
    1140:	85 32       	cpi	r24, 0x25	; 37
    1142:	29 f4       	brne	.+10     	; 0x114e <vfprintf+0x56>
    1144:	b6 01       	movw	r22, r12
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 83 0a 	call	0x1506	; 0x1506 <fputc>
    114c:	e7 cf       	rjmp	.-50     	; 0x111c <vfprintf+0x24>
    114e:	91 2c       	mov	r9, r1
    1150:	21 2c       	mov	r2, r1
    1152:	31 2c       	mov	r3, r1
    1154:	ff e1       	ldi	r31, 0x1F	; 31
    1156:	f3 15       	cp	r31, r3
    1158:	d8 f0       	brcs	.+54     	; 0x1190 <vfprintf+0x98>
    115a:	8b 32       	cpi	r24, 0x2B	; 43
    115c:	79 f0       	breq	.+30     	; 0x117c <vfprintf+0x84>
    115e:	38 f4       	brcc	.+14     	; 0x116e <vfprintf+0x76>
    1160:	80 32       	cpi	r24, 0x20	; 32
    1162:	79 f0       	breq	.+30     	; 0x1182 <vfprintf+0x8a>
    1164:	83 32       	cpi	r24, 0x23	; 35
    1166:	a1 f4       	brne	.+40     	; 0x1190 <vfprintf+0x98>
    1168:	23 2d       	mov	r18, r3
    116a:	20 61       	ori	r18, 0x10	; 16
    116c:	1d c0       	rjmp	.+58     	; 0x11a8 <vfprintf+0xb0>
    116e:	8d 32       	cpi	r24, 0x2D	; 45
    1170:	61 f0       	breq	.+24     	; 0x118a <vfprintf+0x92>
    1172:	80 33       	cpi	r24, 0x30	; 48
    1174:	69 f4       	brne	.+26     	; 0x1190 <vfprintf+0x98>
    1176:	23 2d       	mov	r18, r3
    1178:	21 60       	ori	r18, 0x01	; 1
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <vfprintf+0xb0>
    117c:	83 2d       	mov	r24, r3
    117e:	82 60       	ori	r24, 0x02	; 2
    1180:	38 2e       	mov	r3, r24
    1182:	e3 2d       	mov	r30, r3
    1184:	e4 60       	ori	r30, 0x04	; 4
    1186:	3e 2e       	mov	r3, r30
    1188:	2a c0       	rjmp	.+84     	; 0x11de <vfprintf+0xe6>
    118a:	f3 2d       	mov	r31, r3
    118c:	f8 60       	ori	r31, 0x08	; 8
    118e:	1d c0       	rjmp	.+58     	; 0x11ca <vfprintf+0xd2>
    1190:	37 fc       	sbrc	r3, 7
    1192:	2d c0       	rjmp	.+90     	; 0x11ee <vfprintf+0xf6>
    1194:	20 ed       	ldi	r18, 0xD0	; 208
    1196:	28 0f       	add	r18, r24
    1198:	2a 30       	cpi	r18, 0x0A	; 10
    119a:	40 f0       	brcs	.+16     	; 0x11ac <vfprintf+0xb4>
    119c:	8e 32       	cpi	r24, 0x2E	; 46
    119e:	b9 f4       	brne	.+46     	; 0x11ce <vfprintf+0xd6>
    11a0:	36 fc       	sbrc	r3, 6
    11a2:	81 c1       	rjmp	.+770    	; 0x14a6 <vfprintf+0x3ae>
    11a4:	23 2d       	mov	r18, r3
    11a6:	20 64       	ori	r18, 0x40	; 64
    11a8:	32 2e       	mov	r3, r18
    11aa:	19 c0       	rjmp	.+50     	; 0x11de <vfprintf+0xe6>
    11ac:	36 fe       	sbrs	r3, 6
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <vfprintf+0xc4>
    11b0:	8a e0       	ldi	r24, 0x0A	; 10
    11b2:	98 9e       	mul	r9, r24
    11b4:	20 0d       	add	r18, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	92 2e       	mov	r9, r18
    11ba:	11 c0       	rjmp	.+34     	; 0x11de <vfprintf+0xe6>
    11bc:	ea e0       	ldi	r30, 0x0A	; 10
    11be:	2e 9e       	mul	r2, r30
    11c0:	20 0d       	add	r18, r0
    11c2:	11 24       	eor	r1, r1
    11c4:	22 2e       	mov	r2, r18
    11c6:	f3 2d       	mov	r31, r3
    11c8:	f0 62       	ori	r31, 0x20	; 32
    11ca:	3f 2e       	mov	r3, r31
    11cc:	08 c0       	rjmp	.+16     	; 0x11de <vfprintf+0xe6>
    11ce:	8c 36       	cpi	r24, 0x6C	; 108
    11d0:	21 f4       	brne	.+8      	; 0x11da <vfprintf+0xe2>
    11d2:	83 2d       	mov	r24, r3
    11d4:	80 68       	ori	r24, 0x80	; 128
    11d6:	38 2e       	mov	r3, r24
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <vfprintf+0xe6>
    11da:	88 36       	cpi	r24, 0x68	; 104
    11dc:	41 f4       	brne	.+16     	; 0x11ee <vfprintf+0xf6>
    11de:	f7 01       	movw	r30, r14
    11e0:	93 fd       	sbrc	r25, 3
    11e2:	85 91       	lpm	r24, Z+
    11e4:	93 ff       	sbrs	r25, 3
    11e6:	81 91       	ld	r24, Z+
    11e8:	7f 01       	movw	r14, r30
    11ea:	81 11       	cpse	r24, r1
    11ec:	b3 cf       	rjmp	.-154    	; 0x1154 <vfprintf+0x5c>
    11ee:	98 2f       	mov	r25, r24
    11f0:	9f 7d       	andi	r25, 0xDF	; 223
    11f2:	95 54       	subi	r25, 0x45	; 69
    11f4:	93 30       	cpi	r25, 0x03	; 3
    11f6:	28 f4       	brcc	.+10     	; 0x1202 <vfprintf+0x10a>
    11f8:	0c 5f       	subi	r16, 0xFC	; 252
    11fa:	1f 4f       	sbci	r17, 0xFF	; 255
    11fc:	9f e3       	ldi	r25, 0x3F	; 63
    11fe:	99 83       	std	Y+1, r25	; 0x01
    1200:	0d c0       	rjmp	.+26     	; 0x121c <vfprintf+0x124>
    1202:	83 36       	cpi	r24, 0x63	; 99
    1204:	31 f0       	breq	.+12     	; 0x1212 <vfprintf+0x11a>
    1206:	83 37       	cpi	r24, 0x73	; 115
    1208:	71 f0       	breq	.+28     	; 0x1226 <vfprintf+0x12e>
    120a:	83 35       	cpi	r24, 0x53	; 83
    120c:	09 f0       	breq	.+2      	; 0x1210 <vfprintf+0x118>
    120e:	59 c0       	rjmp	.+178    	; 0x12c2 <vfprintf+0x1ca>
    1210:	21 c0       	rjmp	.+66     	; 0x1254 <vfprintf+0x15c>
    1212:	f8 01       	movw	r30, r16
    1214:	80 81       	ld	r24, Z
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	0e 5f       	subi	r16, 0xFE	; 254
    121a:	1f 4f       	sbci	r17, 0xFF	; 255
    121c:	88 24       	eor	r8, r8
    121e:	83 94       	inc	r8
    1220:	91 2c       	mov	r9, r1
    1222:	53 01       	movw	r10, r6
    1224:	13 c0       	rjmp	.+38     	; 0x124c <vfprintf+0x154>
    1226:	28 01       	movw	r4, r16
    1228:	f2 e0       	ldi	r31, 0x02	; 2
    122a:	4f 0e       	add	r4, r31
    122c:	51 1c       	adc	r5, r1
    122e:	f8 01       	movw	r30, r16
    1230:	a0 80       	ld	r10, Z
    1232:	b1 80       	ldd	r11, Z+1	; 0x01
    1234:	36 fe       	sbrs	r3, 6
    1236:	03 c0       	rjmp	.+6      	; 0x123e <vfprintf+0x146>
    1238:	69 2d       	mov	r22, r9
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <vfprintf+0x14a>
    123e:	6f ef       	ldi	r22, 0xFF	; 255
    1240:	7f ef       	ldi	r23, 0xFF	; 255
    1242:	c5 01       	movw	r24, r10
    1244:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <strnlen>
    1248:	4c 01       	movw	r8, r24
    124a:	82 01       	movw	r16, r4
    124c:	f3 2d       	mov	r31, r3
    124e:	ff 77       	andi	r31, 0x7F	; 127
    1250:	3f 2e       	mov	r3, r31
    1252:	16 c0       	rjmp	.+44     	; 0x1280 <vfprintf+0x188>
    1254:	28 01       	movw	r4, r16
    1256:	22 e0       	ldi	r18, 0x02	; 2
    1258:	42 0e       	add	r4, r18
    125a:	51 1c       	adc	r5, r1
    125c:	f8 01       	movw	r30, r16
    125e:	a0 80       	ld	r10, Z
    1260:	b1 80       	ldd	r11, Z+1	; 0x01
    1262:	36 fe       	sbrs	r3, 6
    1264:	03 c0       	rjmp	.+6      	; 0x126c <vfprintf+0x174>
    1266:	69 2d       	mov	r22, r9
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <vfprintf+0x178>
    126c:	6f ef       	ldi	r22, 0xFF	; 255
    126e:	7f ef       	ldi	r23, 0xFF	; 255
    1270:	c5 01       	movw	r24, r10
    1272:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <strnlen_P>
    1276:	4c 01       	movw	r8, r24
    1278:	f3 2d       	mov	r31, r3
    127a:	f0 68       	ori	r31, 0x80	; 128
    127c:	3f 2e       	mov	r3, r31
    127e:	82 01       	movw	r16, r4
    1280:	33 fc       	sbrc	r3, 3
    1282:	1b c0       	rjmp	.+54     	; 0x12ba <vfprintf+0x1c2>
    1284:	82 2d       	mov	r24, r2
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	88 16       	cp	r8, r24
    128a:	99 06       	cpc	r9, r25
    128c:	b0 f4       	brcc	.+44     	; 0x12ba <vfprintf+0x1c2>
    128e:	b6 01       	movw	r22, r12
    1290:	80 e2       	ldi	r24, 0x20	; 32
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 83 0a 	call	0x1506	; 0x1506 <fputc>
    1298:	2a 94       	dec	r2
    129a:	f4 cf       	rjmp	.-24     	; 0x1284 <vfprintf+0x18c>
    129c:	f5 01       	movw	r30, r10
    129e:	37 fc       	sbrc	r3, 7
    12a0:	85 91       	lpm	r24, Z+
    12a2:	37 fe       	sbrs	r3, 7
    12a4:	81 91       	ld	r24, Z+
    12a6:	5f 01       	movw	r10, r30
    12a8:	b6 01       	movw	r22, r12
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 83 0a 	call	0x1506	; 0x1506 <fputc>
    12b0:	21 10       	cpse	r2, r1
    12b2:	2a 94       	dec	r2
    12b4:	21 e0       	ldi	r18, 0x01	; 1
    12b6:	82 1a       	sub	r8, r18
    12b8:	91 08       	sbc	r9, r1
    12ba:	81 14       	cp	r8, r1
    12bc:	91 04       	cpc	r9, r1
    12be:	71 f7       	brne	.-36     	; 0x129c <vfprintf+0x1a4>
    12c0:	e8 c0       	rjmp	.+464    	; 0x1492 <vfprintf+0x39a>
    12c2:	84 36       	cpi	r24, 0x64	; 100
    12c4:	11 f0       	breq	.+4      	; 0x12ca <vfprintf+0x1d2>
    12c6:	89 36       	cpi	r24, 0x69	; 105
    12c8:	41 f5       	brne	.+80     	; 0x131a <vfprintf+0x222>
    12ca:	f8 01       	movw	r30, r16
    12cc:	37 fe       	sbrs	r3, 7
    12ce:	07 c0       	rjmp	.+14     	; 0x12de <vfprintf+0x1e6>
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	93 81       	ldd	r25, Z+3	; 0x03
    12d8:	0c 5f       	subi	r16, 0xFC	; 252
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <vfprintf+0x1f6>
    12de:	60 81       	ld	r22, Z
    12e0:	71 81       	ldd	r23, Z+1	; 0x01
    12e2:	07 2e       	mov	r0, r23
    12e4:	00 0c       	add	r0, r0
    12e6:	88 0b       	sbc	r24, r24
    12e8:	99 0b       	sbc	r25, r25
    12ea:	0e 5f       	subi	r16, 0xFE	; 254
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	f3 2d       	mov	r31, r3
    12f0:	ff 76       	andi	r31, 0x6F	; 111
    12f2:	3f 2e       	mov	r3, r31
    12f4:	97 ff       	sbrs	r25, 7
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <vfprintf+0x212>
    12f8:	90 95       	com	r25
    12fa:	80 95       	com	r24
    12fc:	70 95       	com	r23
    12fe:	61 95       	neg	r22
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	f0 68       	ori	r31, 0x80	; 128
    1308:	3f 2e       	mov	r3, r31
    130a:	2a e0       	ldi	r18, 0x0A	; 10
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	a3 01       	movw	r20, r6
    1310:	0e 94 bf 0a 	call	0x157e	; 0x157e <__ultoa_invert>
    1314:	88 2e       	mov	r8, r24
    1316:	86 18       	sub	r8, r6
    1318:	45 c0       	rjmp	.+138    	; 0x13a4 <vfprintf+0x2ac>
    131a:	85 37       	cpi	r24, 0x75	; 117
    131c:	31 f4       	brne	.+12     	; 0x132a <vfprintf+0x232>
    131e:	23 2d       	mov	r18, r3
    1320:	2f 7e       	andi	r18, 0xEF	; 239
    1322:	b2 2e       	mov	r11, r18
    1324:	2a e0       	ldi	r18, 0x0A	; 10
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	25 c0       	rjmp	.+74     	; 0x1374 <vfprintf+0x27c>
    132a:	93 2d       	mov	r25, r3
    132c:	99 7f       	andi	r25, 0xF9	; 249
    132e:	b9 2e       	mov	r11, r25
    1330:	8f 36       	cpi	r24, 0x6F	; 111
    1332:	c1 f0       	breq	.+48     	; 0x1364 <vfprintf+0x26c>
    1334:	18 f4       	brcc	.+6      	; 0x133c <vfprintf+0x244>
    1336:	88 35       	cpi	r24, 0x58	; 88
    1338:	79 f0       	breq	.+30     	; 0x1358 <vfprintf+0x260>
    133a:	b5 c0       	rjmp	.+362    	; 0x14a6 <vfprintf+0x3ae>
    133c:	80 37       	cpi	r24, 0x70	; 112
    133e:	19 f0       	breq	.+6      	; 0x1346 <vfprintf+0x24e>
    1340:	88 37       	cpi	r24, 0x78	; 120
    1342:	21 f0       	breq	.+8      	; 0x134c <vfprintf+0x254>
    1344:	b0 c0       	rjmp	.+352    	; 0x14a6 <vfprintf+0x3ae>
    1346:	e9 2f       	mov	r30, r25
    1348:	e0 61       	ori	r30, 0x10	; 16
    134a:	be 2e       	mov	r11, r30
    134c:	b4 fe       	sbrs	r11, 4
    134e:	0d c0       	rjmp	.+26     	; 0x136a <vfprintf+0x272>
    1350:	fb 2d       	mov	r31, r11
    1352:	f4 60       	ori	r31, 0x04	; 4
    1354:	bf 2e       	mov	r11, r31
    1356:	09 c0       	rjmp	.+18     	; 0x136a <vfprintf+0x272>
    1358:	34 fe       	sbrs	r3, 4
    135a:	0a c0       	rjmp	.+20     	; 0x1370 <vfprintf+0x278>
    135c:	29 2f       	mov	r18, r25
    135e:	26 60       	ori	r18, 0x06	; 6
    1360:	b2 2e       	mov	r11, r18
    1362:	06 c0       	rjmp	.+12     	; 0x1370 <vfprintf+0x278>
    1364:	28 e0       	ldi	r18, 0x08	; 8
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	05 c0       	rjmp	.+10     	; 0x1374 <vfprintf+0x27c>
    136a:	20 e1       	ldi	r18, 0x10	; 16
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <vfprintf+0x27c>
    1370:	20 e1       	ldi	r18, 0x10	; 16
    1372:	32 e0       	ldi	r19, 0x02	; 2
    1374:	f8 01       	movw	r30, r16
    1376:	b7 fe       	sbrs	r11, 7
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <vfprintf+0x290>
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	0c 5f       	subi	r16, 0xFC	; 252
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <vfprintf+0x29c>
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 5f       	subi	r16, 0xFE	; 254
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	a3 01       	movw	r20, r6
    1396:	0e 94 bf 0a 	call	0x157e	; 0x157e <__ultoa_invert>
    139a:	88 2e       	mov	r8, r24
    139c:	86 18       	sub	r8, r6
    139e:	fb 2d       	mov	r31, r11
    13a0:	ff 77       	andi	r31, 0x7F	; 127
    13a2:	3f 2e       	mov	r3, r31
    13a4:	36 fe       	sbrs	r3, 6
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <vfprintf+0x2ca>
    13a8:	23 2d       	mov	r18, r3
    13aa:	2e 7f       	andi	r18, 0xFE	; 254
    13ac:	a2 2e       	mov	r10, r18
    13ae:	89 14       	cp	r8, r9
    13b0:	58 f4       	brcc	.+22     	; 0x13c8 <vfprintf+0x2d0>
    13b2:	34 fe       	sbrs	r3, 4
    13b4:	0b c0       	rjmp	.+22     	; 0x13cc <vfprintf+0x2d4>
    13b6:	32 fc       	sbrc	r3, 2
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <vfprintf+0x2d4>
    13ba:	83 2d       	mov	r24, r3
    13bc:	8e 7e       	andi	r24, 0xEE	; 238
    13be:	a8 2e       	mov	r10, r24
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <vfprintf+0x2d4>
    13c2:	b8 2c       	mov	r11, r8
    13c4:	a3 2c       	mov	r10, r3
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <vfprintf+0x2d6>
    13c8:	b8 2c       	mov	r11, r8
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <vfprintf+0x2d6>
    13cc:	b9 2c       	mov	r11, r9
    13ce:	a4 fe       	sbrs	r10, 4
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <vfprintf+0x2f8>
    13d2:	fe 01       	movw	r30, r28
    13d4:	e8 0d       	add	r30, r8
    13d6:	f1 1d       	adc	r31, r1
    13d8:	80 81       	ld	r24, Z
    13da:	80 33       	cpi	r24, 0x30	; 48
    13dc:	21 f4       	brne	.+8      	; 0x13e6 <vfprintf+0x2ee>
    13de:	9a 2d       	mov	r25, r10
    13e0:	99 7e       	andi	r25, 0xE9	; 233
    13e2:	a9 2e       	mov	r10, r25
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <vfprintf+0x300>
    13e6:	a2 fe       	sbrs	r10, 2
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <vfprintf+0x2fe>
    13ea:	b3 94       	inc	r11
    13ec:	b3 94       	inc	r11
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <vfprintf+0x300>
    13f0:	8a 2d       	mov	r24, r10
    13f2:	86 78       	andi	r24, 0x86	; 134
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <vfprintf+0x300>
    13f6:	b3 94       	inc	r11
    13f8:	a3 fc       	sbrc	r10, 3
    13fa:	11 c0       	rjmp	.+34     	; 0x141e <vfprintf+0x326>
    13fc:	a0 fe       	sbrs	r10, 0
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <vfprintf+0x314>
    1400:	b2 14       	cp	r11, r2
    1402:	88 f4       	brcc	.+34     	; 0x1426 <vfprintf+0x32e>
    1404:	28 0c       	add	r2, r8
    1406:	92 2c       	mov	r9, r2
    1408:	9b 18       	sub	r9, r11
    140a:	0e c0       	rjmp	.+28     	; 0x1428 <vfprintf+0x330>
    140c:	b2 14       	cp	r11, r2
    140e:	60 f4       	brcc	.+24     	; 0x1428 <vfprintf+0x330>
    1410:	b6 01       	movw	r22, r12
    1412:	80 e2       	ldi	r24, 0x20	; 32
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 83 0a 	call	0x1506	; 0x1506 <fputc>
    141a:	b3 94       	inc	r11
    141c:	f7 cf       	rjmp	.-18     	; 0x140c <vfprintf+0x314>
    141e:	b2 14       	cp	r11, r2
    1420:	18 f4       	brcc	.+6      	; 0x1428 <vfprintf+0x330>
    1422:	2b 18       	sub	r2, r11
    1424:	02 c0       	rjmp	.+4      	; 0x142a <vfprintf+0x332>
    1426:	98 2c       	mov	r9, r8
    1428:	21 2c       	mov	r2, r1
    142a:	a4 fe       	sbrs	r10, 4
    142c:	10 c0       	rjmp	.+32     	; 0x144e <vfprintf+0x356>
    142e:	b6 01       	movw	r22, r12
    1430:	80 e3       	ldi	r24, 0x30	; 48
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 83 0a 	call	0x1506	; 0x1506 <fputc>
    1438:	a2 fe       	sbrs	r10, 2
    143a:	17 c0       	rjmp	.+46     	; 0x146a <vfprintf+0x372>
    143c:	a1 fc       	sbrc	r10, 1
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <vfprintf+0x34e>
    1440:	88 e7       	ldi	r24, 0x78	; 120
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 c0       	rjmp	.+4      	; 0x144a <vfprintf+0x352>
    1446:	88 e5       	ldi	r24, 0x58	; 88
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	b6 01       	movw	r22, r12
    144c:	0c c0       	rjmp	.+24     	; 0x1466 <vfprintf+0x36e>
    144e:	8a 2d       	mov	r24, r10
    1450:	86 78       	andi	r24, 0x86	; 134
    1452:	59 f0       	breq	.+22     	; 0x146a <vfprintf+0x372>
    1454:	a1 fe       	sbrs	r10, 1
    1456:	02 c0       	rjmp	.+4      	; 0x145c <vfprintf+0x364>
    1458:	8b e2       	ldi	r24, 0x2B	; 43
    145a:	01 c0       	rjmp	.+2      	; 0x145e <vfprintf+0x366>
    145c:	80 e2       	ldi	r24, 0x20	; 32
    145e:	a7 fc       	sbrc	r10, 7
    1460:	8d e2       	ldi	r24, 0x2D	; 45
    1462:	b6 01       	movw	r22, r12
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 83 0a 	call	0x1506	; 0x1506 <fputc>
    146a:	89 14       	cp	r8, r9
    146c:	38 f4       	brcc	.+14     	; 0x147c <vfprintf+0x384>
    146e:	b6 01       	movw	r22, r12
    1470:	80 e3       	ldi	r24, 0x30	; 48
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 83 0a 	call	0x1506	; 0x1506 <fputc>
    1478:	9a 94       	dec	r9
    147a:	f7 cf       	rjmp	.-18     	; 0x146a <vfprintf+0x372>
    147c:	8a 94       	dec	r8
    147e:	f3 01       	movw	r30, r6
    1480:	e8 0d       	add	r30, r8
    1482:	f1 1d       	adc	r31, r1
    1484:	80 81       	ld	r24, Z
    1486:	b6 01       	movw	r22, r12
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 83 0a 	call	0x1506	; 0x1506 <fputc>
    148e:	81 10       	cpse	r8, r1
    1490:	f5 cf       	rjmp	.-22     	; 0x147c <vfprintf+0x384>
    1492:	22 20       	and	r2, r2
    1494:	09 f4       	brne	.+2      	; 0x1498 <vfprintf+0x3a0>
    1496:	42 ce       	rjmp	.-892    	; 0x111c <vfprintf+0x24>
    1498:	b6 01       	movw	r22, r12
    149a:	80 e2       	ldi	r24, 0x20	; 32
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 83 0a 	call	0x1506	; 0x1506 <fputc>
    14a2:	2a 94       	dec	r2
    14a4:	f6 cf       	rjmp	.-20     	; 0x1492 <vfprintf+0x39a>
    14a6:	f6 01       	movw	r30, r12
    14a8:	86 81       	ldd	r24, Z+6	; 0x06
    14aa:	97 81       	ldd	r25, Z+7	; 0x07
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <vfprintf+0x3ba>
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	9f ef       	ldi	r25, 0xFF	; 255
    14b2:	2b 96       	adiw	r28, 0x0b	; 11
    14b4:	e2 e1       	ldi	r30, 0x12	; 18
    14b6:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__epilogue_restores__>

000014ba <strnlen_P>:
    14ba:	fc 01       	movw	r30, r24
    14bc:	05 90       	lpm	r0, Z+
    14be:	61 50       	subi	r22, 0x01	; 1
    14c0:	70 40       	sbci	r23, 0x00	; 0
    14c2:	01 10       	cpse	r0, r1
    14c4:	d8 f7       	brcc	.-10     	; 0x14bc <strnlen_P+0x2>
    14c6:	80 95       	com	r24
    14c8:	90 95       	com	r25
    14ca:	8e 0f       	add	r24, r30
    14cc:	9f 1f       	adc	r25, r31
    14ce:	08 95       	ret

000014d0 <strnlen>:
    14d0:	fc 01       	movw	r30, r24
    14d2:	61 50       	subi	r22, 0x01	; 1
    14d4:	70 40       	sbci	r23, 0x00	; 0
    14d6:	01 90       	ld	r0, Z+
    14d8:	01 10       	cpse	r0, r1
    14da:	d8 f7       	brcc	.-10     	; 0x14d2 <strnlen+0x2>
    14dc:	80 95       	com	r24
    14de:	90 95       	com	r25
    14e0:	8e 0f       	add	r24, r30
    14e2:	9f 1f       	adc	r25, r31
    14e4:	08 95       	ret

000014e6 <strrev>:
    14e6:	dc 01       	movw	r26, r24
    14e8:	fc 01       	movw	r30, r24
    14ea:	67 2f       	mov	r22, r23
    14ec:	71 91       	ld	r23, Z+
    14ee:	77 23       	and	r23, r23
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <strrev+0x4>
    14f2:	32 97       	sbiw	r30, 0x02	; 2
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <strrev+0x18>
    14f6:	7c 91       	ld	r23, X
    14f8:	6d 93       	st	X+, r22
    14fa:	70 83       	st	Z, r23
    14fc:	62 91       	ld	r22, -Z
    14fe:	ae 17       	cp	r26, r30
    1500:	bf 07       	cpc	r27, r31
    1502:	c8 f3       	brcs	.-14     	; 0x14f6 <strrev+0x10>
    1504:	08 95       	ret

00001506 <fputc>:
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	fb 01       	movw	r30, r22
    1510:	23 81       	ldd	r18, Z+3	; 0x03
    1512:	21 fd       	sbrc	r18, 1
    1514:	03 c0       	rjmp	.+6      	; 0x151c <fputc+0x16>
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	9f ef       	ldi	r25, 0xFF	; 255
    151a:	2c c0       	rjmp	.+88     	; 0x1574 <fputc+0x6e>
    151c:	22 ff       	sbrs	r18, 2
    151e:	16 c0       	rjmp	.+44     	; 0x154c <fputc+0x46>
    1520:	46 81       	ldd	r20, Z+6	; 0x06
    1522:	57 81       	ldd	r21, Z+7	; 0x07
    1524:	24 81       	ldd	r18, Z+4	; 0x04
    1526:	35 81       	ldd	r19, Z+5	; 0x05
    1528:	42 17       	cp	r20, r18
    152a:	53 07       	cpc	r21, r19
    152c:	44 f4       	brge	.+16     	; 0x153e <fputc+0x38>
    152e:	a0 81       	ld	r26, Z
    1530:	b1 81       	ldd	r27, Z+1	; 0x01
    1532:	9d 01       	movw	r18, r26
    1534:	2f 5f       	subi	r18, 0xFF	; 255
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	31 83       	std	Z+1, r19	; 0x01
    153a:	20 83       	st	Z, r18
    153c:	8c 93       	st	X, r24
    153e:	26 81       	ldd	r18, Z+6	; 0x06
    1540:	37 81       	ldd	r19, Z+7	; 0x07
    1542:	2f 5f       	subi	r18, 0xFF	; 255
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	37 83       	std	Z+7, r19	; 0x07
    1548:	26 83       	std	Z+6, r18	; 0x06
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <fputc+0x6e>
    154c:	8b 01       	movw	r16, r22
    154e:	ec 01       	movw	r28, r24
    1550:	fb 01       	movw	r30, r22
    1552:	00 84       	ldd	r0, Z+8	; 0x08
    1554:	f1 85       	ldd	r31, Z+9	; 0x09
    1556:	e0 2d       	mov	r30, r0
    1558:	09 95       	icall
    155a:	89 2b       	or	r24, r25
    155c:	e1 f6       	brne	.-72     	; 0x1516 <fputc+0x10>
    155e:	d8 01       	movw	r26, r16
    1560:	16 96       	adiw	r26, 0x06	; 6
    1562:	8d 91       	ld	r24, X+
    1564:	9c 91       	ld	r25, X
    1566:	17 97       	sbiw	r26, 0x07	; 7
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	17 96       	adiw	r26, 0x07	; 7
    156c:	9c 93       	st	X, r25
    156e:	8e 93       	st	-X, r24
    1570:	16 97       	sbiw	r26, 0x06	; 6
    1572:	ce 01       	movw	r24, r28
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	08 95       	ret

0000157e <__ultoa_invert>:
    157e:	fa 01       	movw	r30, r20
    1580:	aa 27       	eor	r26, r26
    1582:	28 30       	cpi	r18, 0x08	; 8
    1584:	51 f1       	breq	.+84     	; 0x15da <__ultoa_invert+0x5c>
    1586:	20 31       	cpi	r18, 0x10	; 16
    1588:	81 f1       	breq	.+96     	; 0x15ea <__ultoa_invert+0x6c>
    158a:	e8 94       	clt
    158c:	6f 93       	push	r22
    158e:	6e 7f       	andi	r22, 0xFE	; 254
    1590:	6e 5f       	subi	r22, 0xFE	; 254
    1592:	7f 4f       	sbci	r23, 0xFF	; 255
    1594:	8f 4f       	sbci	r24, 0xFF	; 255
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	af 4f       	sbci	r26, 0xFF	; 255
    159a:	b1 e0       	ldi	r27, 0x01	; 1
    159c:	3e d0       	rcall	.+124    	; 0x161a <__ultoa_invert+0x9c>
    159e:	b4 e0       	ldi	r27, 0x04	; 4
    15a0:	3c d0       	rcall	.+120    	; 0x161a <__ultoa_invert+0x9c>
    15a2:	67 0f       	add	r22, r23
    15a4:	78 1f       	adc	r23, r24
    15a6:	89 1f       	adc	r24, r25
    15a8:	9a 1f       	adc	r25, r26
    15aa:	a1 1d       	adc	r26, r1
    15ac:	68 0f       	add	r22, r24
    15ae:	79 1f       	adc	r23, r25
    15b0:	8a 1f       	adc	r24, r26
    15b2:	91 1d       	adc	r25, r1
    15b4:	a1 1d       	adc	r26, r1
    15b6:	6a 0f       	add	r22, r26
    15b8:	71 1d       	adc	r23, r1
    15ba:	81 1d       	adc	r24, r1
    15bc:	91 1d       	adc	r25, r1
    15be:	a1 1d       	adc	r26, r1
    15c0:	20 d0       	rcall	.+64     	; 0x1602 <__ultoa_invert+0x84>
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <__ultoa_invert+0x48>
    15c4:	68 94       	set
    15c6:	3f 91       	pop	r19
    15c8:	2a e0       	ldi	r18, 0x0A	; 10
    15ca:	26 9f       	mul	r18, r22
    15cc:	11 24       	eor	r1, r1
    15ce:	30 19       	sub	r19, r0
    15d0:	30 5d       	subi	r19, 0xD0	; 208
    15d2:	31 93       	st	Z+, r19
    15d4:	de f6       	brtc	.-74     	; 0x158c <__ultoa_invert+0xe>
    15d6:	cf 01       	movw	r24, r30
    15d8:	08 95       	ret
    15da:	46 2f       	mov	r20, r22
    15dc:	47 70       	andi	r20, 0x07	; 7
    15de:	40 5d       	subi	r20, 0xD0	; 208
    15e0:	41 93       	st	Z+, r20
    15e2:	b3 e0       	ldi	r27, 0x03	; 3
    15e4:	0f d0       	rcall	.+30     	; 0x1604 <__ultoa_invert+0x86>
    15e6:	c9 f7       	brne	.-14     	; 0x15da <__ultoa_invert+0x5c>
    15e8:	f6 cf       	rjmp	.-20     	; 0x15d6 <__ultoa_invert+0x58>
    15ea:	46 2f       	mov	r20, r22
    15ec:	4f 70       	andi	r20, 0x0F	; 15
    15ee:	40 5d       	subi	r20, 0xD0	; 208
    15f0:	4a 33       	cpi	r20, 0x3A	; 58
    15f2:	18 f0       	brcs	.+6      	; 0x15fa <__ultoa_invert+0x7c>
    15f4:	49 5d       	subi	r20, 0xD9	; 217
    15f6:	31 fd       	sbrc	r19, 1
    15f8:	40 52       	subi	r20, 0x20	; 32
    15fa:	41 93       	st	Z+, r20
    15fc:	02 d0       	rcall	.+4      	; 0x1602 <__ultoa_invert+0x84>
    15fe:	a9 f7       	brne	.-22     	; 0x15ea <__ultoa_invert+0x6c>
    1600:	ea cf       	rjmp	.-44     	; 0x15d6 <__ultoa_invert+0x58>
    1602:	b4 e0       	ldi	r27, 0x04	; 4
    1604:	a6 95       	lsr	r26
    1606:	97 95       	ror	r25
    1608:	87 95       	ror	r24
    160a:	77 95       	ror	r23
    160c:	67 95       	ror	r22
    160e:	ba 95       	dec	r27
    1610:	c9 f7       	brne	.-14     	; 0x1604 <__ultoa_invert+0x86>
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	61 05       	cpc	r22, r1
    1616:	71 05       	cpc	r23, r1
    1618:	08 95       	ret
    161a:	9b 01       	movw	r18, r22
    161c:	ac 01       	movw	r20, r24
    161e:	0a 2e       	mov	r0, r26
    1620:	06 94       	lsr	r0
    1622:	57 95       	ror	r21
    1624:	47 95       	ror	r20
    1626:	37 95       	ror	r19
    1628:	27 95       	ror	r18
    162a:	ba 95       	dec	r27
    162c:	c9 f7       	brne	.-14     	; 0x1620 <__ultoa_invert+0xa2>
    162e:	62 0f       	add	r22, r18
    1630:	73 1f       	adc	r23, r19
    1632:	84 1f       	adc	r24, r20
    1634:	95 1f       	adc	r25, r21
    1636:	a0 1d       	adc	r26, r0
    1638:	08 95       	ret

0000163a <__prologue_saves__>:
    163a:	2f 92       	push	r2
    163c:	3f 92       	push	r3
    163e:	4f 92       	push	r4
    1640:	5f 92       	push	r5
    1642:	6f 92       	push	r6
    1644:	7f 92       	push	r7
    1646:	8f 92       	push	r8
    1648:	9f 92       	push	r9
    164a:	af 92       	push	r10
    164c:	bf 92       	push	r11
    164e:	cf 92       	push	r12
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	ff 92       	push	r15
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	ca 1b       	sub	r28, r26
    1664:	db 0b       	sbc	r29, r27
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
    1670:	09 94       	ijmp

00001672 <__epilogue_restores__>:
    1672:	2a 88       	ldd	r2, Y+18	; 0x12
    1674:	39 88       	ldd	r3, Y+17	; 0x11
    1676:	48 88       	ldd	r4, Y+16	; 0x10
    1678:	5f 84       	ldd	r5, Y+15	; 0x0f
    167a:	6e 84       	ldd	r6, Y+14	; 0x0e
    167c:	7d 84       	ldd	r7, Y+13	; 0x0d
    167e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1680:	9b 84       	ldd	r9, Y+11	; 0x0b
    1682:	aa 84       	ldd	r10, Y+10	; 0x0a
    1684:	b9 84       	ldd	r11, Y+9	; 0x09
    1686:	c8 84       	ldd	r12, Y+8	; 0x08
    1688:	df 80       	ldd	r13, Y+7	; 0x07
    168a:	ee 80       	ldd	r14, Y+6	; 0x06
    168c:	fd 80       	ldd	r15, Y+5	; 0x05
    168e:	0c 81       	ldd	r16, Y+4	; 0x04
    1690:	1b 81       	ldd	r17, Y+3	; 0x03
    1692:	aa 81       	ldd	r26, Y+2	; 0x02
    1694:	b9 81       	ldd	r27, Y+1	; 0x01
    1696:	ce 0f       	add	r28, r30
    1698:	d1 1d       	adc	r29, r1
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	ed 01       	movw	r28, r26
    16a6:	08 95       	ret

000016a8 <_exit>:
    16a8:	f8 94       	cli

000016aa <__stop_program>:
    16aa:	ff cf       	rjmp	.-2      	; 0x16aa <__stop_program>
